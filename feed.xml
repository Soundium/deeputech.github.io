<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technorage</title>
    <description>Where I rage about technology and stuff!</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 16 Jul 2019 15:38:56 +0200</pubDate>
    <lastBuildDate>Tue, 16 Jul 2019 15:38:56 +0200</lastBuildDate>
    <generator>Jekyll v2.0.0</generator>
    
      <item>
        <title>Why I‚Äôm moving away from Medium</title>
        <description>&lt;p&gt;After much deliberation, I have decided to move my blogs away from &lt;a href=&quot;https://medium.com/@deepu105&quot;&gt;Medium&lt;/a&gt;. I was considering setting up my own blog with &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; but then decided to go with &lt;a href=&quot;https://dev.to/deepu105&quot;&gt;Dev.to&lt;/a&gt;. Below are the reasons why I decided to leave Medium and why I chose Dev.to.&lt;/p&gt;

&lt;p&gt;All considerations were purely from a technical writing perspective as I was using Medium for publishing technical content.&lt;/p&gt;

&lt;h3 id=&quot;the-love-hate-relationship-with-medium&quot;&gt;The love-hate relationship with Medium&lt;/h3&gt;

&lt;p&gt;I loved Medium when I started writing here, reasons being;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A simple minimal &amp;amp; clean UI ‚Äî It still is one of the best&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ease of authoring and publishing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Community and visibility&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Publications&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ease of customization&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But there were also things I didn‚Äôt like much which slowly become quite annoying&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The weird commenting mechanism(Every comment is a post, and they literally mess up your stories listing page)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2302/1*nnAeUa07rTwcFw-iMBe1vQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Medium had a weird WYSIWYG editor interface which is great for normal content creation but not so great for technical content creation. It had some markdown like shortcuts, but it could never match the ease of using proper markdown editors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Export only in HTML (Duh!!)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But these annoyances were not the main reason I decided to switch platforms. Below are the main reasons why I decided Medium isn‚Äôt a good fit for me.&lt;/p&gt;

&lt;p&gt;Medium has been aggressively pushing for content to be put behind a paywall and they have made it clear that content not opting in will not get any push inside the platform. This means the community and visibility part is applicable only if you opt-in for the paywall. I understand why Medium does and I think its a great monetary source for established authors but it doesn‚Äôt work for mere mortals like me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*yq7VjalsUx_ujXWeEKpAag.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a result of the above, the traffic you get from Medium itself is very low compared to external sources. See one of my stories below for an example. For newer stories, it is even lower.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*buR4q7oynmBkYmHGLx_jtw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So writing in Medium seems to have no benefit over other platforms as I could get similar views from external sources and might get better writing experience elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;
So after a week of moving to the Dev community below are my stats and its incredible, I have ~50k views, ~1k reactions and ~300 followers and one of my post was &lt;a href=&quot;https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-5ahf&quot;&gt;featured in top 7&lt;/a&gt; of the week and all this in just 1 week. I didn‚Äôt get anything remotely close to this from Medium in a year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/g5y8ud1w4re7xysb3g99.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;enter-devto&quot;&gt;Enter Dev.to&lt;/h3&gt;

&lt;p&gt;When I was trying to find a different platform, some of the most important aspects I considered were below&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt;: A community without paywall and a community were your blogs get visibility and get traffic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ease of authoring&lt;/strong&gt;: Authoring experience was important, hence at minimum Markdown support was a must. This way I can author posts in my favorite IDE(VsCode in this case) and doesn‚Äôt have to be restricted with the platform‚Äôs capability. Also, this ensures that I can easily move my posts to another platform in the future if needed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dev.to satisfied these needs and provided a nice and clean UI and descent publishing experience on top.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I think Medium is still perfect for normal blogging and for content creators who have subscribers willing to pay even if they put articles behind a paywall. But for technical content creators who do not want their content behind a paywall, there are better platforms. I might still crosspost between Dev.to and Medium from time to time but Dev.to will be my primary blogging platform.&lt;/p&gt;

&lt;p&gt;Originally published in &lt;a href=&quot;https://medium.com/@deepu105/why-im-moving-away-from-medium-f9153a01247e&quot;&gt;Medium&lt;/a&gt; on June 13, 2019&lt;/p&gt;

&lt;p&gt;Cover image credit: Photo by &lt;a href=&quot;https://unsplash.com/@milkovi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;MILKOV√ç&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/writing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/why-im-moving-away-from-medium/</link>
        <guid isPermaLink="true">/why-im-moving-away-from-medium/</guid>
        
        <category>writing,</category>
        
        <category>medium,</category>
        
        <category>development,</category>
        
        <category>tech</category>
        
        
      </item>
    
      <item>
        <title>My reflections on Golang</title>
        <description>&lt;p&gt;Do I like &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt;? Yes. Would I use it for every use case I have? Definitely not.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Having worked on most of these said languages I won&amp;#39;t choose Go for general purpose atleast not current version of Go, may be 2.0 has more potential.&lt;/p&gt;&amp;mdash; ùîªùïñùïñùï°ùï¶ ùïÇ ùïäùïíùï§ùïöùïïùïôùïíùï£ùïíùïü (@deepu105) &lt;a href=&quot;https://twitter.com/deepu105/status/1103546225851277313?ref_src=twsrc%5Etfw&quot;&gt;March 7, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Don‚Äôt get me wrong, I like &lt;strong&gt;Go&lt;/strong&gt; for what it is but like every other programming language, it is always a love-hate relationship. No programming language is perfect and all of them have their own merits and use cases. I hate it when I see people overusing something and I see that pattern with Go these days. To be fair, I have done my fair share of overusing in my career as well (mostly with JavaScript) and I can see why people do it. This is not gonna be a blog bashing Go or praising Go, it is just what I think of it after using it for over 9 months. Before I start a rant on the good and bad of Go, here is some background.&lt;/p&gt;

&lt;p&gt;After being in the tech industry for over 10 years, I would like to think of myself as a pragmatic programmer or at least as someone getting closer to that - that should be a programmer‚Äôs &lt;a href=&quot;https://www.britannica.com/topic/nirvana-religion&quot;&gt;Nirvana&lt;/a&gt;. I didn‚Äôt even plan to be a programmer, if you ask the 18-year-old self of me, he would say that he wanted to be an astrophysicist or a robotics engineer(Yes building space robots was my dream). Like most teenage dreams, it didn‚Äôt happen and I ended up in tech instead.&lt;/p&gt;

&lt;p&gt;Though landing an IT Job was an accident, programming wasn‚Äôt alien to me. I did learn some C/C++ when I was in high school to help my girlfriend with her project and did dabble in some PHP, JavaScript, HTML and Flash(ActionScript) during my early college years for personal projects and blogs. So when I got a real IT job without having an IT background, I did what many in that situation did, I started learning the language that I stumbled upon first based on the task I was given, which happened to be Java. Being a quick learner and having some idea of programming concepts from C/C++ Java wasn‚Äôt that hard to learn and I was a pretty decent Java programmer in a few months. Then I was tasked with building some Web UI and I dived deep into the world of HTML, CSS, and JavaScript and honestly fell in love with JavaScript due to its flexibility and ease. I mastered JQuery and soon become the go-to guy for front end stuff in the office.&lt;/p&gt;

&lt;p&gt;I was anything but pragmatic back then, I was preaching JavaScript to everyone and would vehemently debate anyone who thought JS was a bad language.&lt;/p&gt;

&lt;p&gt;Fast forward to now and if I look back I have done projects in C/C++, PHP, JavaScript, TypeScript, HTML, CSS, Java, Groovy, Scala, Python and recently Go. I think this exposure probably helped me become more pragmatic as I have started to look at programming languages as tools and each of them has their own strengths and weaknesses. Well, there is more to this story but that‚Äôs for another time, the point is to set a baseline for the below reflections so that I don‚Äôt sound like someone just trying &lt;strong&gt;Go&lt;/strong&gt; and going on a rant.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Go is the latest language I learned and worked with, I have worked on a CLI project built with Go for over 9 months now, building a powerful scaffolding engine with my team(Yes, pretty much like &lt;a href=&quot;https://www.jhipster.tech/&quot;&gt;JHipster&lt;/a&gt;) that uses Go templates where you could create what we call &lt;a href=&quot;https://github.com/xebialabs/blueprints&quot;&gt;blueprints&lt;/a&gt; at &lt;a href=&quot;https://xebialabs.com/&quot;&gt;XebiaLabs&lt;/a&gt;. So yes I have done much more than a hello world app with Go.&lt;/p&gt;

&lt;p&gt;Without wasting more time on unrelated things here is what I like about Go and what I don‚Äôt like.&lt;/p&gt;

&lt;h2 id=&quot;what-i-like-about-go&quot;&gt;What I like about Go&lt;/h2&gt;

&lt;h3 id=&quot;simplicity&quot;&gt;Simplicity&lt;/h3&gt;

&lt;p&gt;I like the fact that Go is a simple language(Going through the entire language features on the &lt;a href=&quot;https://tour.golang.org&quot;&gt;tour&lt;/a&gt; page literally takes 15 minutes unless you do the exercises) and unlike Scala, Rust or even JavaScript Go doesn‚Äôt have many ways of doing the same thing which is extremely valuable for people working in teams and companies wanting to write maintainable code where even a newly joined employee can read and understand the code without needing much help. I think this is one of the biggest reason that is driving Go adoption. If you have worked on large scale projects you know how difficult it is when the code is unreadable and every new team member have to spend so much time trying to understand what a piece of code does. So I was really happy when I saw that Go doesn‚Äôt have features that rely heavily on implicit and such. The language features and concepts are easy to grasp and you can start being productive in Go quite soon. The only concepts that might seem bit complex are the concurrency part and even that is simpler compared to other languages.&lt;/p&gt;

&lt;h3 id=&quot;language-provided-code-style-and-vetting&quot;&gt;Language provided code style and vetting&lt;/h3&gt;

&lt;p&gt;This is such a time saver. IMO every language should just do this so that you don‚Äôt waste time debating code style and setting up lint rules. Go provides opinionated formatting, linting &amp;amp; vet tool as part of the package and the Go compiler even enforces things like unused variable and stuff. Most of the IDE/Editor plugins also use these tools for formatting and linting and hence helps to keep consistent code style across Go projects which again adds to readability and maintenance.&lt;/p&gt;

&lt;h3 id=&quot;goroutines--channels&quot;&gt;Goroutines &amp;amp; Channels&lt;/h3&gt;

&lt;p&gt;This is one of the biggest strength of Go. The native support for concurrency and parallelism. This makes Go an ideal candidate for applications that require heavy concurrent and/or parallel processing, networking and so on. Goroutines makes it so easy to start lightweight threads and channels provide a way to communicate between these threads acting like a message bus.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;collected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ping&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pong&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;collected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;collected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// [ pong ping ]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;closures--callbacks&quot;&gt;Closures &amp;amp; callbacks&lt;/h3&gt;

&lt;p&gt;If you have used JavaScript you would know how useful closures and callbacks are. Go like JavaScript treats functions as objects and hence can be assigned to variables, stored in maps, passed as function parameters and returned from functions. It also supports creating nested closures and anonymous functions which helps to encapsulate context. The behavior is pretty much similar to JavaScript. So you can apply some functional programming concepts in Go as well.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// an unnecessarily complicated example&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fnMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fnType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;ADD&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;SUB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// this is a closure&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;localFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// returns a function&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// callback&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// function passed as parameter&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ADD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SUB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;type-assertion-and-switches&quot;&gt;Type assertion and switches&lt;/h3&gt;

&lt;p&gt;Go provides a nice way of asserting types and can be used with a &lt;a href=&quot;https://tour.golang.org/methods/16&quot;&gt;switch statement&lt;/a&gt; which makes it easier to do reflection and such.&lt;/p&gt;

&lt;h3 id=&quot;multiple-returns&quot;&gt;Multiple returns&lt;/h3&gt;

&lt;p&gt;This is quite a handy feature like in Python, we are used to deconstructing objects/arrays to achieve this in JavaScript and using Tuples and such in some languages. The returns can also be named which is nice for readability.&lt;/p&gt;

&lt;h3 id=&quot;tooling&quot;&gt;Tooling&lt;/h3&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The in-code test coverage highlight in VsCode for &lt;a href=&quot;https://twitter.com/golang?ref_src=twsrc%5Etfw&quot;&gt;@golang&lt;/a&gt;  is slick. This is the best way to ensure you have good coverage&lt;a href=&quot;https://twitter.com/code?ref_src=twsrc%5Etfw&quot;&gt;@code&lt;/a&gt; &lt;a href=&quot;https://t.co/nk8iMwenCz&quot;&gt;pic.twitter.com/nk8iMwenCz&lt;/a&gt;&lt;/p&gt;&amp;mdash; ùîªùïñùïñùï°ùï¶ ùïÇ ùïäùïíùï§ùïöùïïùïôùïíùï£ùïíùïü (@deepu105) &lt;a href=&quot;https://twitter.com/deepu105/status/1095992144152748033?ref_src=twsrc%5Etfw&quot;&gt;February 14, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;As mentioned earlier Go provides standard tooling for formatting, linting and so on and the language design makes it easy to build tooling for Go and hence editors/IDE has nice features like test generation, code coverage and so on. For example, the VSCode integration for Go provides the below options which helps with consistency and less boilerplate to write by hand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/chcyfvlj52k6xgrg5adg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;doesnt-need-a-runtime&quot;&gt;Doesn‚Äôt need a runtime&lt;/h3&gt;

&lt;p&gt;Go doesn‚Äôt need a runtime like JVM or NodeJS, Go applications can be compiled into an executable cross-platform binary using the &lt;a href=&quot;https://golang.org/pkg/go/build/&quot;&gt;standard Go tooling&lt;/a&gt;. This makes Go applications portable and platform independent.&lt;/p&gt;

&lt;h2 id=&quot;what-i-dont-like-about-go&quot;&gt;What I don‚Äôt like about Go&lt;/h2&gt;

&lt;h3 id=&quot;simplicity-1&quot;&gt;Simplicity&lt;/h3&gt;

&lt;p&gt;This is where the love-hate relationship starts, Go is a simple language which is nice but at times it feels too simple &amp;amp; verbose and coming from Java/JavaScript ecosystem you are spoiled with some nice features &amp;amp; syntax sugars which IMO makes the code more expressive and helps to keep it DRY. The things that I miss the most are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Generics: This is currently &lt;a href=&quot;https://go.googlesource.com/proposal/+/master/design/go2draft-generics-overview.md&quot;&gt;being considered&lt;/a&gt; in the next major iteration of Go, but until then this just makes you repeat code unnecessarily. I have lost count of the number of times I had to repeat the same block of code for different types where Generics would have kept it nice and simple. This is also one reason you don‚Äôt see libraries like Lodash for Go.&lt;/li&gt;
  &lt;li&gt;Standard error handling: This also seems to be &lt;a href=&quot;https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md&quot;&gt;coming&lt;/a&gt; in the next major iteration of Go but until it lands I can complain. Anyone writing Go will remember doing &lt;code class=&quot;highlighter-rouge&quot;&gt;if err != nil&lt;/code&gt; uncountable times in your code. Removing those might cut the codebase in size by at least 20%&lt;/li&gt;
  &lt;li&gt;Default values: Would love to see this in Go, this is quite useful. Maybe I‚Äôm just spoiled by JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;too-much-boilerplatenot-suitable-for-dry&quot;&gt;Too much boilerplate(not suitable for DRY)&lt;/h3&gt;

&lt;p&gt;Go being too simple means you would have to write a lot of code as the language doesn‚Äôt offer constructs like map, reduce, and so on, and add the lack of generic on top means you would end up writing a lot of utility code and a lot of that will be repeated to accommodate different types. Imagine writing a map function in Go, you would have to write one for every combination of Map that can be used. These factors don‚Äôt make it easy to do DRY programming in Go.&lt;/p&gt;

&lt;h3 id=&quot;dependency-management&quot;&gt;Dependency management&lt;/h3&gt;

&lt;p&gt;The dependency management in the Go ecosystem feels immature and too basic compared to other mainstream languages. Importing packages from Git is nice but it also makes it more fragile. What can go wrong when you are depending on a Git branch on your production application right! There is no way to use relative dependencies(Can‚Äôt beat NPM link!).
These problems are similar to the issues with dependency range in Node package managers. Glide seems to be a popular choice but still is not as mature as solutions in other languages. In the project, I work on we used Gradle along with &lt;a href=&quot;https://github.com/gogradle/gogradle&quot;&gt;Gogradle&lt;/a&gt; and though it works fine the developer experience is not as good as using Gradle/Maven for Java project or using NPM on a NodeJS project.&lt;/p&gt;

&lt;h3 id=&quot;source-code-in-gopath&quot;&gt;Source code in GOPATH&lt;/h3&gt;

&lt;p&gt;Go recommends you to create your Go projects under the GOPATH. Maybe it is just me, but I hate this as I would normally like to organize my code. For example, I have a &lt;code class=&quot;highlighter-rouge&quot;&gt;~/workspace/&lt;/code&gt; folder where I organize my projects by the organization. If I follow the Go recommendation I have to put the project under &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/deepu/go/src&lt;/code&gt; along with all the library source code that is downloaded. If you don‚Äôt follow this then most of the Go tooling just doesn‚Äôt work. Currently, I have a specific Gradle task that copies over all vendor libs to my local Gopath inside &lt;code class=&quot;highlighter-rouge&quot;&gt;~/workspace/XL/&amp;lt;project&amp;gt;&lt;/code&gt; to workaround this.&lt;/p&gt;

&lt;h3 id=&quot;confusing-pointer-behaviors&quot;&gt;Confusing pointer behaviors&lt;/h3&gt;

&lt;p&gt;Go has pretty good pointer support and the default behavior is to pass an object by value. If you want to pass something by reference you have to mark it specifically. But this behavior is not very consistent as the content of Maps and Slices by default are passed by reference and hence this could be a bit surprising to beginners.&lt;/p&gt;

&lt;h3 id=&quot;struct-hell&quot;&gt;Struct hell&lt;/h3&gt;

&lt;p&gt;This is more of a nitpick. Structs are what you would use to create data structures in Go. It might look like an object but they are not exactly objects. While structs are fine functionally, in many cases you will end up with structs that look like the ugly brother of JSON. In real-world projects, you always will end up creating complex structs, especially if the application is doing some generic json or yaml parsing and soon your code will start to look like this. This is not that big of a concern but it just hurts my eyes every time I debug something or write tests.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;	&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyYamlDoc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ohno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyYamlDoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;
						&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
							&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;
								&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
									&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;
										&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
											&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{}},&lt;/span&gt;
										&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
									&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;
								&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
							&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;
						&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{}},&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}][]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{}},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ohno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;weird-interface-construct&quot;&gt;Weird interface construct&lt;/h3&gt;
&lt;p&gt;The interface concept in Go is weird. These are the only implicit construct in Go. If you come from other languages that have interfaces then this will feel weird. The fact that they are implicit means its really easy to mess things up. Refactoring is messy unless you have a smart IDE, and you can accidentally implement someone‚Äôs interface by just naming your method a certain way. While implicit interfaces certainly help with polymorphism and decoupling code I personally would still prefer interfaces that are explicit.&lt;/p&gt;

&lt;p&gt;Another interface Gotcha is nil value checks, in Go, an interface is made up of two parts a type and a value, so an interface is &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; only when both type and value are nil, this means you can‚Äôt just simply do nil checks on interfaces. This is so confusing the Go has a specific &lt;a href=&quot;https://golang.org/doc/faq#nil_error&quot;&gt;FAQ&lt;/a&gt; for this. Below article explains this in more detail&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic &quot;&gt;https://dev.to/pauljlucas/go-tcha-when-nil‚Äìnil-hic &lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;single-gc-algorithm&quot;&gt;Single GC algorithm&lt;/h3&gt;

&lt;p&gt;Go implements a concurrent tri-color mark-sweep collector as its garbage collector. This specific GC implementation is optimized for better pause times while ignoring program throughput, pause frequency and many other parameters that are considered during GC. Some people in the Go community claims this as the best ever GC. Having some Java background I would have to disagree as most JVM implementations provide multiple GC algorithms you can choose from which includes a concurrent mark-sweep collector as well and most of these are balanced to take care of many more parameters than just pause times. &lt;a href=&quot;https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e&quot;&gt;This&lt;/a&gt; articles analyses this in detail. So some use cases that produce a high amount of garbage might actually be slower in Go compared to another language due to frequent GC.&lt;/p&gt;

&lt;h3 id=&quot;developer-experience&quot;&gt;Developer experience&lt;/h3&gt;

&lt;p&gt;This is purely based on personal experience and hence will vary from others. Being a polyglot developer who has worked with many languages, the developer experience from Go is not the best I have experienced. The DX of the JavaScript ecosystem is the best I have experienced so far. It feels like there are things missing in the Go ecosystem. Dependency management and toolchains need improvement. A bit more sensible language features and some syntax sugar wouldn‚Äôt hurt as well.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Having worked with many major languages I can‚Äôt just use Go for every use case but I can see why people would use Go for every use-case out there if they haven‚Äôt worked with other languages.&lt;/p&gt;

&lt;h3 id=&quot;so-where-would-i-use-go&quot;&gt;So where would I use Go?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I would definitely use Go when the use case requires a lot of parallel processing and/or concurrency(both are not the same thing but are closer to each other) as you can make use of Goroutines for this and is much simpler and efficient than managing threads like in a Java application or working around it in JavaScript using callback hell since JS is actually single threaded. &lt;a href=&quot;http://tleyden.github.io/blog/2014/10/30/goroutines-vs-threads/&quot;&gt;Here&lt;/a&gt; is a nice article explaining the advantage of Goroutines.&lt;/li&gt;
  &lt;li&gt;Simple microservices where boilerplate is not a concern&lt;/li&gt;
  &lt;li&gt;Networking applications or web servers, especially with async workloads, can greatly benefit from Go. But to be fair you can do these in Java, Python, JS, etc as well but Go in the end will provide better efficiency and would be easier to implement.&lt;/li&gt;
  &lt;li&gt;System programming. While Rust or C is a much better choice for this but if those are not in your arsenal then Go is the next best thing. With decent support for pointers and its standard library its easier for system programs than other mainstream languages. Many popular system tools like Docker, Kubernetes, etc are indeed written in Go.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;where-i-wouldnt-use-go&quot;&gt;Where I wouldn‚Äôt use Go?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Complex web application: I would choose Java with a framework like &lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt; or &lt;a href=&quot;https://micronaut.io/&quot;&gt;Micronaut&lt;/a&gt; as its much more maintainable and battle-tested and you would focus more on business logic than writing boilerplate infrastructure code. One &lt;a href=&quot;https://medium.com/@norwood.john.m/hashbash-a-comparison-of-cpu-and-io-bound-applications-in-go-and-java-across-multiple-metrics-d358df6e03b1&quot;&gt;common argument&lt;/a&gt; against this stack is its memory footprint but it is possible to get lower memory footprint with Spring and frameworks like Micronaut and &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; actually promises that OOB.&lt;/li&gt;
  &lt;li&gt;After writing a high-level CLI tool in Go, I hate the experience, I kept thinking that doing it in JavaScript would have been 10 times more productive and a nicer experience. SO I would choose JavaScript or TypeScript running on NodeJS for CLI tool any day. Mainly due to the ecosystem and the sheer joy and speed of getting things done without spending all your time writing boilerplate code. But this wouldn‚Äôt be applicable if the CLI in question a system tool or a networking tool, in those cases Go could be a good option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do hope Go evolves into a general purpose language over time and many of these concerns are solved. In the meantime, I‚Äôll try to follow this mantra.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Remember this manthra &amp;quot;right tools for the right job, right pattern for the use-case&amp;quot;  &lt;a href=&quot;https://twitter.com/hashtag/engineering?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#engineering&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/development?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#development&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/architecture?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#architecture&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/microservices?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#microservices&lt;/a&gt; &lt;a href=&quot;https://t.co/SA42jQ5TLH&quot;&gt;https://t.co/SA42jQ5TLH&lt;/a&gt;&lt;/p&gt;&amp;mdash; ùîªùïñùïñùï°ùï¶ ùïÇ ùïäùïíùï§ùïöùïïùïôùïíùï£ùïíùïü (@deepu105) &lt;a href=&quot;https://twitter.com/deepu105/status/1146138541765906432?ref_src=twsrc%5Etfw&quot;&gt;July 2, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;But then you can always choose to fasten a screw using a hammer.&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Using the wrong tool for the job. &lt;a href=&quot;https://twitter.com/hashtag/programming?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#programming&lt;/a&gt; &lt;a href=&quot;https://t.co/5RdVqGuZoj&quot;&gt;pic.twitter.com/5RdVqGuZoj&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rory Preddyü•ë (@rorypreddy) &lt;a href=&quot;https://twitter.com/rorypreddy/status/1142967056150728708?ref_src=twsrc%5Etfw&quot;&gt;June 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover image credit: Unknown. Found &lt;a href=&quot;https://thepracticaldev.s3.amazonaws.com/i/snu9zy2ywp0ftfcthda2.jpg&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/reflection-on-golang/</link>
        <guid isPermaLink="true">/reflection-on-golang/</guid>
        
        <category>go,</category>
        
        <category>programming,</category>
        
        <category>languages,</category>
        
        <category>thepragmaticprogrammer</category>
        
        
      </item>
    
      <item>
        <title>React components done right with TypeScript mapped and conditional types</title>
        <description>&lt;p&gt;You‚Äôve probably heard about TypeScript, If not you should check it out. You may have heard someone claiming how great type safety is.&lt;/p&gt;

&lt;p&gt;TypeScript is great. As someone who hates to transpile his code, I would definitely do it with TypeScript if I had to. So much has been said about TypeScript, and there isn‚Äôt really anything new that I can add. But I do believe that type safety is not all about making your code ugly with type definitions everywhere. So how can we write type-safe code without having to litter type declarations everywhere?&lt;/p&gt;

&lt;p&gt;Type inference and advanced features like derived and dynamic types are the answer. Editors and IDEs we use are smart enough to handle code with inferred type gracefully without us having to see the types all the time visually. (Of course, they all usually show you the type when you hover over an inferred type.)&lt;/p&gt;

&lt;p&gt;TypeScript has very good type inference. As a rule of thumb, you can always start without declaring the type for any variable and see if the compiler infers it. With modern editors like VSCode, you can see this immediately. So set your tsconfig to the strict mode. Then start declaring types when the compiler complains.&lt;/p&gt;

&lt;p&gt;Additionally, TypeScript 2.1 and 2.8 introduced a bunch of cool lookup types. Now you can dynamically infer types using different techniques like Intersection types, Union types, Index types, mapped types and conditional types.&lt;/p&gt;

&lt;h2 id=&quot;index-types&quot;&gt;Index types&lt;/h2&gt;

&lt;p&gt;Index types enable us to check properties and types of an interface or type dynamically using the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyof T&lt;/code&gt; (&lt;strong&gt;index type query operator&lt;/strong&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;T[K]&lt;/code&gt; (&lt;strong&gt;indexed access operator&lt;/strong&gt;). Let‚Äôs take the below interface for example.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;keyof T&lt;/code&gt; operator gets a union type of all the key names of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; and hence &lt;code class=&quot;highlighter-rouge&quot;&gt;keyof Person&lt;/code&gt; will give us &lt;code class=&quot;highlighter-rouge&quot;&gt;'name' | 'age' | 'address' | sayHi'&lt;/code&gt; as result.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;T[K]&lt;/code&gt; operator gets the type for the provided key. &lt;code class=&quot;highlighter-rouge&quot;&gt;Person['name']&lt;/code&gt; will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Person[*keyof* Person]&lt;/code&gt; will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;string | number | ((msg: string) =&amp;gt; string)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mapped-types&quot;&gt;Mapped types&lt;/h2&gt;

&lt;p&gt;Let us see what mapped types are. Let us say we have the below interface for a Person.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now in every project, it is almost always a common requirement to have variations of a certain interface. For example, let‚Äôs say we need a read-only version of the person as below.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReadonlyPerson&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, we would have to replicate the Person interface and we have to keep them in sync manually. This is where mapped types will come in handy, so let us use the builtin mapped type, &lt;code class=&quot;highlighter-rouge&quot;&gt;Readonly&lt;/code&gt;, for this.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReadonlyPerson&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Readonly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you hover over the &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadonlyPerson&lt;/code&gt; type you can see the inferred type as below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*GLnLx-iMscyEMe9BQqCazg.png&quot; alt=&quot;Inferred type view in VsCode&quot; /&gt;&lt;em&gt;Inferred type view in VsCode&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That is cool, right? Now we can create types from existing types and don‚Äôt have to worry about keeping them in sync. How does it work, what does &lt;code class=&quot;highlighter-rouge&quot;&gt;Readonly&amp;lt;Person&amp;gt;&lt;/code&gt; do? Let‚Äôs take a look at the mapped type.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Readonly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; operator from TypeScript does the trick here. It maps all the declarations of the existing type into the new type. The &lt;code class=&quot;highlighter-rouge&quot;&gt;keyof&lt;/code&gt; operator provides the keys from our type for the mapping. Let us build our own mapped type.&lt;/p&gt;

&lt;p&gt;Let us say we need a read-only Person interface where all the fields are nullable as well. We can build a mapped type as below for that.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReadonlyNullablePerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And it is inferred as below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*R24n6ufx4STh96tfldlgJw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs make it generic so that it can be used with any interface.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReadonlyNullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReadonlyNullablePerson&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReadonlyNullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TypeScript includes &lt;code class=&quot;highlighter-rouge&quot;&gt;Readonly&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Partial&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Pick&amp;lt;T, K extends keyof T&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Record&amp;lt;K extends string, T&amp;gt;&lt;/code&gt; as built-in mapped types. Pick and Record can be used as below, check them in your editor to see what types they produce.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PersonMinimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RecordedPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For every other use case, you can build your own mapped types.&lt;/p&gt;

&lt;h2 id=&quot;conditional-types&quot;&gt;Conditional types&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A conditional type selects one of two possible types based on a condition expressed as a type relationship test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us look at an example.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Me&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FooBool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will result in boolean&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FooString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;You&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will result in string&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The type dynamically inferred from &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&amp;lt;T, U&amp;gt;&lt;/code&gt; will be either &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; depending on what the first generic is extended from.&lt;/p&gt;

&lt;p&gt;Let us see how we can mix conditional types with mapped types to infer a new type from Person which only includes the non-function properties.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NonFunctionPropNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NonFunctionProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NonFunctionPropNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PersonProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NonFunctionProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Produces the below type
    type PersonProps = {
        name: string;
        age: number;
        address: string;
    }
    */&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We first get all the non-function property names from the interface. Then use the &lt;strong&gt;Pick&lt;/strong&gt; mapped type to pick those from the interface to form the new interface.&lt;/p&gt;

&lt;p&gt;TypeScript provides the following inbuilt conditional types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Exclude&amp;lt;T, U&amp;gt;&lt;/code&gt; ‚Äì Exclude from &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; those types that are assignable to &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Extract&amp;lt;T, U&amp;gt;&lt;/code&gt; ‚Äì Extract from &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; those types that are assignable to &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NonNullable&amp;lt;T&amp;gt;&lt;/code&gt; ‚Äì Exclude &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReturnType&amp;lt;T&amp;gt;&lt;/code&gt; ‚Äì Obtain the return type of a function type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;InstanceType&amp;lt;T&amp;gt;&lt;/code&gt; ‚Äì Obtain the instance type of a constructor function type.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;let-us-put-it-into-use&quot;&gt;Let us put it into use&lt;/h2&gt;

&lt;p&gt;These advanced types become even more powerful when you combine them together. Let‚Äôs see some practical uses of this in React.&lt;/p&gt;

&lt;h3 id=&quot;react-component-and-redux-reducer-in-es6&quot;&gt;React component and Redux reducer in ES6&lt;/h3&gt;

&lt;p&gt;Let see a simple React component with a reducer written in ES6. Take a look at &lt;strong&gt;&lt;em&gt;index.jsx&lt;/em&gt;&lt;/strong&gt; in the below code sandbox:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;40n3y52qlx runonclick=1 &quot;&gt;40n3y52qlx runonclick=1 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we use the prop-types library to define the component props. It is not the most efficient way, as it includes considerable overhead during development. It doesn‚Äôt provide full type safety anyway.&lt;/p&gt;

&lt;h3 id=&quot;react-component-and-redux-reducer-in-typescript&quot;&gt;React component and Redux reducer in TypeScript&lt;/h3&gt;

&lt;p&gt;Now let us convert this simple example to TypeScript so that it is type safe. Take a look at &lt;strong&gt;&lt;em&gt;index.tsx&lt;/em&gt;&lt;/strong&gt; in the below code sandbox:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;znv36k09op runonclick=1 &quot;&gt;znv36k09op runonclick=1 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the code is more type-safe now. It is also much more verbose even without PropTypes library and all the type inference.&lt;/p&gt;

&lt;h3 id=&quot;react-component-and-redux-reducer-in-typescript-with-advanced-types&quot;&gt;React component and Redux reducer in TypeScript with advanced types&lt;/h3&gt;

&lt;p&gt;Now let us apply the advanced types that we learned to make this example less verbose and even more type safe. Take a look at &lt;strong&gt;&lt;em&gt;index.tsx&lt;/em&gt;&lt;/strong&gt; in the below code sandbox:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;zq7w69p57x runonclick=1 &quot;&gt;zq7w69p57x runonclick=1 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we used &lt;code class=&quot;highlighter-rouge&quot;&gt;Readonly&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ReturnType&lt;/code&gt; mapping along with some other type inference techniques to write a more type-safe but less verbose version of the component.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you are using React with TypeScript, then these are some of the techniques you must apply. If you are considering a type system for React, then look no further than TypeScript. It has great features, great tooling, excellent IDE/Editor support and an awesome community.&lt;/p&gt;

&lt;p&gt;I gave a talk on TypeScript for Devoxx 2018, and you can see the video and slides if you like here.&lt;/p&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;//www.youtube.com/embed/&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;
            &amp;lt;script async=&quot;async&quot; class=&quot;speakerdeck-embed&quot; data-id=ffe22480dbfd4c1f83f66c380bba2283  data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&amp;gt; &amp;lt;/script&amp;gt;
            &lt;noscript&gt;
                &lt;a href=&quot;//speakerdeck.com/player/ffe22480dbfd4c1f83f66c380bba2283&quot;&gt;
                &lt;img alt=&quot;Folien bei Speakerdeck&quot; src=&quot;//speakerd.s3.amazonaws.com/presentations/ffe22480dbfd4c1f83f66c380bba2283/slide_0.jpg&quot; /&gt;
                &lt;/a&gt;
            &lt;/noscript&gt;
          &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Check out my book ‚Äú&lt;em&gt;Full Stack Development with JHipster&lt;/em&gt;‚Äù on &lt;a href=&quot;https://www.amazon.com/Stack-Development-JHipster-Deepu-Sasidharan/dp/178847631X&quot;&gt;Amazon&lt;/a&gt; and &lt;a href=&quot;https://www.packtpub.com/application-development/full-stack-development-jhipster&quot;&gt;Packt&lt;/a&gt; if you like to learn about Full stack development with an awesome stack that includes TypeScript and React.&lt;/p&gt;

&lt;p&gt;If you like JHipster don‚Äôt forget to give it a star on &lt;a href=&quot;https://github.com/jhipster/generator-jhipster&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like this article, please like or comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Originally published in &lt;a href=&quot;https://medium.com/free-code-camp/make-react-components-great-again-with-typescript-mapped-and-conditional-types-fa729bfc1a79&quot;&gt;Medium&lt;/a&gt; on November 19, 2018&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/react-done-right-with-typescript/</link>
        <guid isPermaLink="true">/react-done-right-with-typescript/</guid>
        
        <category>typescript,</category>
        
        <category>react,</category>
        
        <category>javascript,</category>
        
        <category>webdev</category>
        
        
      </item>
    
      <item>
        <title>My beautiful Linux development environment</title>
        <description>&lt;p&gt;One of the questions that I get quite often after a conference talk is weirdly not about what I presented but about my Linux desktop environment. People are more curious about that beautiful distro rather than the awesome presentation I just did üòÇ&lt;/p&gt;

&lt;p&gt;Not that I‚Äôm complaining, I love my desktop setup. I love it so much that I was afraid of getting a new PC when I was due for one. I was afraid that I would mess things up(I have done that many times in the past, I think Linux users can relate to me)&lt;/p&gt;

&lt;p&gt;So I decided to capture the most important aspects of my distro for anyone interested in using Linux as their primary OS for development.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/3zajm5va5xplo9mg7804.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is not just my work laptop, it‚Äôs my primary machine which I use for all of the below&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java, JS, TS, Go, Python &amp;amp; web development&lt;/li&gt;
  &lt;li&gt;JHipster development&lt;/li&gt;
  &lt;li&gt;Running multiple web applications locally&lt;/li&gt;
  &lt;li&gt;Running Docker containers&lt;/li&gt;
  &lt;li&gt;VirtualBox for Windows testing &amp;amp; other VM stuff&lt;/li&gt;
  &lt;li&gt;Kubernetes, Terraform, CloudFormation development and deployments&lt;/li&gt;
  &lt;li&gt;Azure, AWS &amp;amp; GCP deployments using required CLI tools&lt;/li&gt;
  &lt;li&gt;Heavy browser usage&lt;/li&gt;
  &lt;li&gt;Email, chat &amp;amp; video conferencing&lt;/li&gt;
  &lt;li&gt;Plex media server&lt;/li&gt;
  &lt;li&gt;Blogging&lt;/li&gt;
  &lt;li&gt;Youtube &amp;amp; Social media&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;machine-configuration&quot;&gt;Machine configuration&lt;/h2&gt;

&lt;p&gt;The configuration of the machine is also quite important for any development setup. So my laptop is a Dell Precision 5530 Mobile Workstation. I had the exact same setup with my old Dell 5510 as well, which is quite a similar configuration to 5530. I still have it as a backup Laptop, its 2 years old now but can still give most of the top end laptops today a run for its money.&lt;/p&gt;

&lt;p&gt;I used the &lt;a href=&quot;https://www.dell.com/nl-nl/work/shop/isv-gecertificeerd-en-geoptimaliseerd-workstation/precision-5530/spd/precision-15-5530-laptop/xctop5530emea?selectionState=eyJGUHJpY2UiOjMwODcuNDUsIklVUHJpY2UiOjMwODcuNDUsIk9DIjoieGN0b3A1NTMwZW1lYSIsIlF0eSI6MSwiUHJTdCI6IiIsIk1vZHMiOlt7IklkIjoxNDYsIk9wdHMiOlt7IklkIjoiR0NCV1pVMiJ9XX0seyJJZCI6MTEsIk9wdHMiOlt7IklkIjoiR1JFUEZVMiJ9XX0seyJJZCI6MTQ5LCJPcHRzIjpbeyJJZCI6Ikc1R0FJQzgifV19LHsiSWQiOjYsIk9wdHMiOlt7IklkIjoiRzBTTVk1OSJ9XX0seyJJZCI6MywiT3B0cyI6W3siSWQiOiJHSk1TVDRLIn1dfSx7IklkIjo4LCJPcHRzIjpbeyJJZCI6IkdSMlNHSkgifV19LHsiSWQiOjM3MiwiT3B0cyI6W3siSWQiOiJHM1c1QzZIIn1dfSx7IklkIjoxMDAyLCJPcHRzIjpbeyJJZCI6IkdFODBUOVcifV19LHsiSWQiOjc0OSwiT3B0cyI6W3siSWQiOiJHOEJYV1lJIn1dfSx7IklkIjo1NSwiT3B0cyI6W3siSWQiOiJHSkVWUDNYIn1dfSx7IklkIjoxMTIsIk9wdHMiOlt7IklkIjoiR1c5SUs3RiJ9XX0seyJJZCI6MTAwMywiT3B0cyI6W3siSWQiOiJHNlE1WFo0In1dfSx7IklkIjoyMDAwNzYsIk9wdHMiOlt7IklkIjoiR1cyRVNBNyJ9XX0seyJJZCI6MzAsIk9wdHMiOlt7IklkIjoiODI3ODc1In1dfV19&amp;amp;cartItemId=c4d9c6f5-9956-4c6f-87ac-d0472018ad78&quot;&gt;custom configuration&lt;/a&gt; option from Dell to get the best possible setup at that time. it‚Äôs not cheap but my company, &lt;a href=&quot;https://xebialabs.com/&quot;&gt;XebiaLabs&lt;/a&gt;, provided a handsome budget and I think it is worth every penny. This, in my opinion, is one of the best Laptop for developers. So here is what I have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Processor&lt;/strong&gt;: Intel¬Æ Core‚Ñ¢ i9-8950HK CPU @ 2.90GHz √ó 12&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 32GB, DDR4-2666MHz SDRAM, 2 DIMMS, Non-ECC&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HDD&lt;/strong&gt;: M.2 1TB NVMe PCIe SED class 40 SSD&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Graphics&lt;/strong&gt;: NVIDIA Quadro P2000 with 4 GB GDDR5 memory &amp;amp; Intel¬Æ UHD Graphics 630 (Coffeelake 3x8 GT2)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wireless&lt;/strong&gt;: Intel Wifi Link 9260 2x2 802.11AC + BT 4.2 vPro wireless card&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keyboard&lt;/strong&gt;: English QWERTY US, backlit&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Display&lt;/strong&gt;: 15.6‚Äù FHD 1920x1080 Anti-Glare LED-backlit Non-touch IPS UltraSharp‚Ñ¢&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Battery&lt;/strong&gt;: 6-cell (97Wh) Lithium Ion battery with ExpressCharge‚Ñ¢&lt;/p&gt;

&lt;h2 id=&quot;operating-system-and-desktop-environment&quot;&gt;Operating system and desktop environment&lt;/h2&gt;

&lt;p&gt;The most important of course is the operating system, I‚Äôm running &lt;a href=&quot;https://getfedora.org/&quot;&gt;Fedora 30&lt;/a&gt; at the moment with &lt;a href=&quot;https://www.gnome.org/&quot;&gt;GNOME 3.32.2&lt;/a&gt; as the Desktop and I‚Äôm very happy with it. I find Fedora more suitable for development machines than other distros as it has a short release cycle and is fairly stable so you get latest &amp;amp; stable software all the time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/it61sd8sldm00nipfiy4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What good is a desktop without a nice theme right? GNOME is great when it comes to themes and I went with &lt;a href=&quot;https://github.com/andreisergiu98/arc-flatabulous-theme&quot;&gt;Arc-Flatabulous&lt;/a&gt; theme and never looked back. For icons, I use &lt;a href=&quot;https://github.com/snwh/paper-icon-theme&quot;&gt;Paper&lt;/a&gt; as I like the material icon theme.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/h6w1qmxd2mvs88bl0ki7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, it won‚Äôt be complete without some nice GNOME plugins. Below are the plugins that I use.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/307/dash-to-dock/&quot;&gt;Dash to Dock&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/503/always-zoom-workspaces/&quot;&gt;Always Zoom Workspaces&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/16/auto-move-windows/&quot;&gt;Auto Move Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/18/native-window-placement/&quot;&gt;Native Window Placement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/600/launch-new-instance/&quot;&gt;Launch new instance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/234/steal-my-focus/&quot;&gt;Steal My Focus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/15/alternatetab/&quot;&gt;AlternateTab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/602/window-list/&quot;&gt;Window List&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/6/applications-menu/&quot;&gt;Applications Menu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/517/caffeine/&quot;&gt;Caffeine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/779/clipboard-indicator/&quot;&gt;Clipboard Indicator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/917/gistnotes/&quot;&gt;Gistnotes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/750/openweather/&quot;&gt;OpenWeather&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/8/places-status-indicator/&quot;&gt;Places Status Indicator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/120/system-monitor/&quot;&gt;System-monitor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/570/todotxt/&quot;&gt;Todo.txt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/1031/topicons/&quot;&gt;TopIcons Plus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/19/user-themes/&quot;&gt;User Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;development-tools&quot;&gt;Development tools&lt;/h2&gt;

&lt;p&gt;Now, these are mostly objective choices and really doesn‚Äôt matter as long as you are comfortable with the tools you choose. Below are my choices for some of the important categories for development. I‚Äôm not including obvious things like Vim, Git, NodeJS, Docker, Kubernetes, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt;: This is one of the most important for a developer. I use &lt;a href=&quot;https://www.zsh.org/&quot;&gt;ZSH&lt;/a&gt; along with the awesome &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh My ZSH&lt;/a&gt; as my shell. Now, this won‚Äôt be complete without some nice plugins and theme. I use &lt;a href=&quot;https://github.com/bhilburn/powerlevel9k&quot;&gt;powerlevel9k&lt;/a&gt; theme with some customizations. I also use &lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot;&gt;zsh-autosuggestions&lt;/a&gt;, git, docker, docker-compose, autojump, &lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot;&gt;zsh-syntax-highlighting&lt;/a&gt;, dnf, and npm plugins for Oh My ZSH. Here is my &lt;a href=&quot;https://gist.github.com/deepu105/9723cb70032eca98ff09d110369af67a&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;&lt;/a&gt; with all the customizations. &lt;strong&gt;Update&lt;/strong&gt;: A &lt;a href=&quot;https://dev.to/java4africa/comment/c319&quot;&gt;comment&lt;/a&gt; on this post suggested &lt;a href=&quot;https://github.com/romkatv/powerlevel10k&quot;&gt;powerlevel10k&lt;/a&gt; as an alternative theme and I tried it and turns out it is really way faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;powerlevel9k&lt;/code&gt;. So I think I‚Äôm gonna use &lt;code class=&quot;highlighter-rouge&quot;&gt;powerlevel10k&lt;/code&gt; as my shell theme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: What good is a nice shell without a good terminal. Fortunately, we have &lt;a href=&quot;https://gnunn1.github.io/tilix-web/&quot;&gt;Tilix&lt;/a&gt; one of the best terminal application out there. It has workspaces, tabs, split windows, Quake mode and so on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/flq8pew1hr6l1hwj6egw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Integrated development environment(IDE)&lt;/strong&gt;: &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA ultimate&lt;/a&gt; - I use this only for Java &amp;amp; other JVM language Development&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Editors&lt;/strong&gt;: &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; - My go-to editor. I love it. I use VSCode for web development, Go, Python, JS development, DevOps and everything other than JVM languages. A VSCode setup is never complete without some good plugins. &lt;a href=&quot;https://gist.github.com/deepu105/4599d3b381218b9d1a63119fbf9ca537&quot;&gt;Here&lt;/a&gt; are the plugins that I‚Äôm using. You can run the script to install those.&lt;/p&gt;

&lt;p&gt;Other notable development tools I use are &lt;a href=&quot;https://www.gitkraken.com/&quot;&gt;GitKraken&lt;/a&gt; for Git repo management, &lt;a href=&quot;https://www.scootersoftware.com&quot;&gt;Beyond Compare&lt;/a&gt; for code comparisons, &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;, &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;NVM&lt;/a&gt; for NodeJS version management and &lt;a href=&quot;https://sdkman.io&quot;&gt;SDKMan&lt;/a&gt; for JDK version management.&lt;/p&gt;

&lt;h2 id=&quot;productivity-tools&quot;&gt;Productivity tools&lt;/h2&gt;

&lt;p&gt;Productivity tools are also quite important and below are my choices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Browser&lt;/strong&gt;: Google Chrome is my primary browser. I also use Firefox &amp;amp; Opera sometimes. I do love Opera in terms of its UX, I would love to use it as my primary browser but I miss everything I have synchronized with my Google account in Chrome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email&lt;/strong&gt;: I use &lt;a href=&quot;https://getmailspring.com/&quot;&gt;Mailspring&lt;/a&gt; as my e-mail client. Its a fairly decent mail client with nice themes and a simple UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Office suite&lt;/strong&gt;: I mostly use Google Docs &amp;amp; Microsoft office online but when I have to work on something on my Desktop I use &lt;a href=&quot;https://www.libreoffice.org/&quot;&gt;LibreOffice&lt;/a&gt; which is a good office suite and even handles Microsoft Office &amp;amp; Keynote formats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt;: Of course I use &lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt; and for video conference I use &lt;a href=&quot;https://www.bluejeans.com/&quot;&gt;BlueJeans&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screen capture&lt;/strong&gt;: I use this nifty tool called &lt;a href=&quot;https://github.com/phw/peek&quot;&gt;Peek&lt;/a&gt; for screen recording and &lt;a href=&quot;https://launchpad.net/shutter&quot;&gt;Shutter&lt;/a&gt; for screenshots.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are many other small and nifty utilities that I use, most are command line utilities. There are some notable mentions like &lt;a href=&quot;https://github.com/teejee2008/timeshift&quot;&gt;Timeshift&lt;/a&gt; which is nice for backing up your machine.&lt;/p&gt;

&lt;p&gt;Of course, not everything is perfect in the Linux world, but it is the same with every OS. I was a long time Windows user before switching to Linux. So like every Linux users I have from time to time messed things up(With great power comes great responsibility, Peter). There are many quirks in the Linux world but there is nothing that bothers me much. Some of the most annoying issues I had in the past are below and for now, I don‚Äôt have any noticeable issues.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scroll position jumping when switching apps - Fixed after upgrading to Fedora 30&lt;/li&gt;
  &lt;li&gt;Hibernation was broken - Fixed after upgrading to Fedora 30&lt;/li&gt;
  &lt;li&gt;Audio output selection was broken when plugging in headphones- Fixed after Fedora 28 for me&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;This has been a good day, upgraded to &lt;a href=&quot;https://twitter.com/hashtag/Fedora?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Fedora&lt;/a&gt; 30 and hibernate started to work again. Sweet. I was putting off tinkering that for a long time. &lt;a href=&quot;https://twitter.com/hashtag/Linux?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Linux&lt;/a&gt;&lt;/p&gt;&amp;mdash; ùîªùïñùïñùï°ùï¶ ùïÇ ùïäùïíùï§ùïöùïïùïôùïíùï£ùïíùïü (@deepu105) &lt;a href=&quot;https://twitter.com/deepu105/status/1139602081935966210?ref_src=twsrc%5Etfw&quot;&gt;June 14, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;I hope you find this useful. If you have any question or if you think I missed something please add a comment.&lt;/p&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/my-beautiful-linux-development-environment/</link>
        <guid isPermaLink="true">/my-beautiful-linux-development-environment/</guid>
        
        <category>linux,</category>
        
        <category>fedora,</category>
        
        <category>development,</category>
        
        <category>gnome</category>
        
        
      </item>
    
      <item>
        <title>Must have GNOME extensions</title>
        <description>&lt;p&gt;I‚Äôm a sucker for nice polished UI and great UX. While there are a lot of Linux Desktop environments out there providing great UX and UI, I found &lt;a href=&quot;https://www.gnome.org/&quot;&gt;GNOME&lt;/a&gt; to be the perfect one for my liking. Yes, I have seen/tried a few others. I also found some which are more polished and providing a better default UX out of the box than GNOME like &lt;a href=&quot;https://www.deepin.org/en/dde/&quot;&gt;Deepin&lt;/a&gt; and &lt;a href=&quot;https://elementary.io/&quot;&gt;Elementary&lt;/a&gt;. But below plugins bridge that gap and hence I choose to stick with GNOME which is the default in Fedora, hence quite stable, unless I had a compelling reason to switch.&lt;/p&gt;

&lt;p&gt;So if you like me are a GNOME fan then below are some of the GNOME plugins you must try if you haven‚Äôt already. I have listed the plugins I use in my earlier &lt;a href=&quot;https://dev.to/deepu105/my-beautiful-linux-development-environment-2afc&quot;&gt;post&lt;/a&gt; in the series. here I detail the ones that are a must-have.&lt;/p&gt;

&lt;h4 id=&quot;gnome-tweaks&quot;&gt;&lt;a href=&quot;https://wiki.gnome.org/Apps/Tweaks&quot;&gt;GNOME Tweaks&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This nifty tool lets you tweak/configure a lot of GNOME configuration and should have been included by default in every distro shipping with GNOME. You can customize the appearance, install extensions, configure mouse &amp;amp; keyboard and so on. It can be found in the software center of your distro. Search for ‚ÄúTweaks‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/ka7xuw8odrmnoi8cs383.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gnome-extensions&quot;&gt;Gnome extensions&lt;/h2&gt;

&lt;p&gt;You can install below extensions by visiting the link in the title of extension below and by clicking on the &lt;strong&gt;on&lt;/strong&gt; switch on the top right corner. On Chrome, you would need the &lt;a href=&quot;https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep&quot;&gt;GNOME Shell integration&lt;/a&gt; plugin to enable the switch. On Firefox, it will prompt you to install the plugin if it doesn‚Äôt exist.&lt;/p&gt;

&lt;h4 id=&quot;dash-to-dock&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/307/dash-to-dock/&quot;&gt;Dash to Dock&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;GNOME without this plugin almost feels annoying. IMO this plugin also should be the default GNOME setting. This one moves your GNOME dash into a highly configurable dock which can be placed on the sides or top/bottom of the screen. I find it perfect on the left side of the screen in GNOME. It can be a floating dock or fixed to look like those on Mint or KDE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/we6s8tmhez5e07s25yrr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;always-zoom-workspaces&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/503/always-zoom-workspaces/&quot;&gt;Always Zoom Workspaces&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;By default, the GNOME launcher does not show the workspaces, you have to hover over the right edge to see it. I find it unnecessary given you have enough real estate on the full-screen launcher and the workspace view takes only a little bit. This plugin keeps it zoomed by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/11i5wsf8ymo2pt2gpne8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;steal-my-focusnoannoyance&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/234/steal-my-focus/&quot;&gt;Steal My Focus&lt;/a&gt;/&lt;a href=&quot;https://extensions.gnome.org/extension/1236/noannoyance/&quot;&gt;NoAnnoyance&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is another default in GNOME that is annoying. When something needs focus these plugins brings the window up instead of the default notification. You can use any one of the plugins as both do the same thing.&lt;/p&gt;

&lt;h4 id=&quot;alternatetab&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/15/alternatetab/&quot;&gt;AlternateTab&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This replaces the default Alt+Tab with a more classical window based switcher which IMO is more user-friendly as the default requires more keyboard navigation using the arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/bjt36nvje3640e3h92dq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;window-list&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/602/window-list/&quot;&gt;Window List&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is a classic plugin that adds the window list to the bottom of the screen and is a must if you use multiple monitors as the windows are grouped and placed in the right monitor screen.&lt;/p&gt;

&lt;h4 id=&quot;caffeine&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/517/caffeine/&quot;&gt;Caffeine&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This one adds the ability to temporarily disable screensaver/auto-suspend and automatically activates when you go full-screen. A must have if you are using your computer for watching videos, presentations, screencast and so on.&lt;/p&gt;

&lt;h4 id=&quot;clipboard-indicator&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/779/clipboard-indicator/&quot;&gt;Clipboard Indicator&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is one my favorite. It adds a nifty clipboard manager to the top bar and provides shortcuts to cycle through clipboard entries. A real time saver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/lpfvqyn7x7tb1044s4hx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;gistnotes&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/917/gistnotes/&quot;&gt;Gistnotes&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As a developer using GitHub gist a lot, this one is a very useful plugin. It lets you manage your Gists right from the desktop and you can use it like a notes app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/lv88q4p5dadlvpa8dzmq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;system-monitor&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/120/system-monitor/&quot;&gt;System-monitor&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A nice system monitor plugin that sits on the top bar with a detailed view as a popup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/rrlpbd1sbun38e248isx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;topicons-plus&quot;&gt;&lt;a href=&quot;https://extensions.gnome.org/extension/1031/topicons/&quot;&gt;TopIcons Plus&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This moves legacy icons form applications to the top bar for consistent UX.&lt;/p&gt;

&lt;p&gt;I hope you find this useful. If you have any question or if you think I missed something please add a comment.&lt;/p&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover image photo by &lt;a href=&quot;https://unsplash.com/@brisch27?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Brigitta Schneiter&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/gnome?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/must-have-gnome-plugins/</link>
        <guid isPermaLink="true">/must-have-gnome-plugins/</guid>
        
        <category>linux,</category>
        
        <category>gnome,</category>
        
        <category>fedora,</category>
        
        <category>desktop</category>
        
        
      </item>
    
      <item>
        <title>Deploying JHipster Microservices on Azure Kubernetes Service (AKS)</title>
        <description>&lt;p&gt;If you are developing and deploying applications to production, especially cloud, you would have heard about &lt;a href=&quot;https://kubernetes.io/&quot;&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;. Kubernetes(&lt;strong&gt;k8s&lt;/strong&gt;) is a container orchestration platform originally developed by Google and makes deploying containerized/dockerized applications to production more manageable and scalable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/&quot;&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt; has been crowned as the undeniable champion of container orchestration for a while now and every other &lt;strong&gt;K*S&lt;/strong&gt; offering that we see sprouting up are testimonials for that. The &lt;strong&gt;K&lt;/strong&gt; obviously stands for Kubernetes and &lt;strong&gt;S/E&lt;/strong&gt; stands for Service/Engine and the first letter stands for the product offering it. So far we have &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/aks/&quot;&gt;&lt;strong&gt;AKS&lt;/strong&gt;&lt;/a&gt;(Azure), &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/&quot;&gt;&lt;strong&gt;GKE&lt;/strong&gt;&lt;/a&gt;(Google), and &lt;a href=&quot;https://aws.amazon.com/eks/&quot;&gt;&lt;strong&gt;EKS&lt;/strong&gt;&lt;/a&gt;(Amazon ECS) and &lt;a href=&quot;https://content.pivotal.io/pivotal-container-service-pks&quot;&gt;&lt;strong&gt;PKS&lt;/strong&gt;&lt;/a&gt;(Pivotal) and also some flavors from &lt;a href=&quot;https://cloud.oracle.com/en_US/containers/kubernetes-engine#&quot;&gt;Oracle&lt;/a&gt; and RedHat(read &lt;a href=&quot;https://www.redhat.com/en/technologies/cloud-computing/openshift&quot;&gt;Openshift&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;One of my colleagues have written a &lt;a href=&quot;https://blog.xebialabs.com/2017/12/12/future-container-solutions-will-k-shaped/&quot;&gt;nice article&lt;/a&gt; about it, I highly recommend you read it as well.&lt;/p&gt;

&lt;p&gt;In this article, we will see how we can deploy a microservice architecture created by JHipster to Azure Kubernetes Service.&lt;/p&gt;

&lt;p&gt;Azure Kubernetes Service(AKS) is the managed Kubernetes platform offering from Microsoft to host your containerized applications.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-microservice-application&quot;&gt;Creating the microservice application&lt;/h3&gt;

&lt;p&gt;In one of my &lt;a href=&quot;https://dev.to/deepu105/create-full-microservice-stack-using-jhipster-domain-language-under-30-minutes-4ele&quot;&gt;previous posts&lt;/a&gt;, I showcased how to create a full stack microservice architecture using &lt;strong&gt;JHipster&lt;/strong&gt; and &lt;strong&gt;JDL&lt;/strong&gt;, read the post &lt;a href=&quot;https://dev.to/deepu105/create-full-microservice-stack-using-jhipster-domain-language-under-30-minutes-4ele&quot;&gt;here&lt;/a&gt; if you want to learn more details about it. For this exercise, we will use the same application.&lt;/p&gt;

&lt;p&gt;Let us recap the steps required.&lt;/p&gt;

&lt;p&gt;Create a JDL file, let‚Äôs say app.jdl, and copy the below content into it.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;    application {
      config {
        baseName store,
        applicationType gateway,
        packageName com.jhipster.demo.store,
        serviceDiscoveryType eureka,
        authenticationType jwt,
        prodDatabaseType mysql,
        cacheProvider hazelcast,
        buildTool gradle,
        clientFramework react,
        testFrameworks [protractor]
      }
      entities *
    }

    application {
      config {
        baseName invoice,
        applicationType microservice,
        packageName com.jhipster.demo.invoice,
        serviceDiscoveryType eureka,
        authenticationType jwt,
        prodDatabaseType mysql,
        buildTool gradle,
        serverPort 8081
      }
      entities Invoice, Shipment
    }

    application {
      config {
        baseName notification,
        applicationType microservice,
        packageName com.jhipster.demo.notification,
        serviceDiscoveryType eureka,
        authenticationType jwt,
        databaseType mongodb,
        cacheProvider no,
        enableHibernateCache false,
        buildTool gradle,
        serverPort 8082
      }
      entities Notification
    }

    /* Entities for Store Gateway */

    /** Product sold by the Online store */
    entity Product {
        name String required
        description String
        price BigDecimal required min(0)
        size Size required
        image ImageBlob
    }

    enum Size {
        S, M, L, XL, XXL
    }

    entity ProductCategory {
        name String required
        description String
    }

    entity Customer {
        firstName String required
        lastName String required
        gender Gender required
        email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
        phone String required
        addressLine1 String required
        addressLine2 String
        city String required
        country String required
    }

    enum Gender {
        MALE, FEMALE, OTHER
    }

    entity ProductOrder {
        placedDate Instant required
        status OrderStatus required
        code String required
        invoiceId Long
    }

    enum OrderStatus {
        COMPLETED, PENDING, CANCELLED
    }

    entity OrderItem {
        quantity Integer required min(0)
        totalPrice BigDecimal required min(0)
        status OrderItemStatus required
    }

    enum OrderItemStatus {
        AVAILABLE, OUT_OF_STOCK, BACK_ORDER
    }

    relationship OneToOne {
        Customer{user(login) required} to User
    }

    relationship ManyToOne {
     OrderItem{product(name) required} to Product
    }

    relationship OneToMany {
       Customer{order} to ProductOrder{customer(email) required},
       ProductOrder{orderItem} to OrderItem{order(code) required} ,
       ProductCategory{product} to Product{productCategory(name)}
    }

    service Product, ProductCategory, Customer, ProductOrder, OrderItem with serviceClass
    paginate Product, Customer, ProductOrder, OrderItem with pagination

    /* Entities for Invoice microservice */
    entity Invoice {
        code String required
        date Instant required
        details String
        status InvoiceStatus required
        paymentMethod PaymentMethod required
        paymentDate Instant required
        paymentAmount BigDecimal required
    }

    enum InvoiceStatus {
        PAID, ISSUED, CANCELLED
    }

    entity Shipment {
        trackingCode String
        date Instant required
        details String
    }

    enum PaymentMethod {
        CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
    }

    relationship OneToMany {
        Invoice{shipment} to Shipment{invoice(code) required}
    }

    service Invoice, Shipment with serviceClass
    paginate Invoice, Shipment with pagination
    microservice Invoice, Shipment with invoice

    /* Entities for notification microservice */

    entity Notification {
        date Instant required
        details String
        sentDate Instant required
        format NotificationType required
        userId Long required
        productId Long required
    }

    enum NotificationType {
        EMAIL, SMS, PARCEL
    }

    microservice Notification with notification&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/https://gist.github.com/deepu105/127b220d0c7a3bbf06386cef8128d2f5.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now create a directory called &lt;strong&gt;ecommerce&lt;/strong&gt; and navigate into it. Run the JHipster import-jdl command. It could take a few minutes, especially the NPM install step.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ mkdir ecommerce &amp;amp;&amp;amp; cd ecommerce
$ jhipster import-jdl app.jdl
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the JHipster process is complete, you will see that we have our store gateway, invoice service and notification service created and ready for us. The process until this is explained in more detail in my previous post &lt;a href=&quot;https://dev.to/deepu105/create-full-microservice-stack-using-jhipster-domain-language-under-30-minutes-4ele&quot;&gt;here&lt;/a&gt; and you can deploy the application locally using Docker as explained in that post. If you haven‚Äôt done that before I strongly suggest that step so that you get an idea of the application and you also can make sure it works locally on your machine.&lt;/p&gt;

&lt;h3 id=&quot;generating-the-kubernetes-configuration&quot;&gt;Generating the Kubernetes configuration&lt;/h3&gt;

&lt;p&gt;Now that our application is ready, let us create the required configurations for Kubernetes using JHipster. This can also be done using JDL by adding below snippet to the JDL file we used earlier.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;deployment {
  deploymentType kubernetes
  appsFolders [store, invoice, notification]
  serviceDiscoveryType eureka
  dockerRepositoryName &quot;deepu105&quot; // use your own docker repo username here
  kubernetesNamespace jhipster
  kubernetesServiceType LoadBalancer
  monitoring no
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For now, let us use the JHipster CLI to do this. In the ecommerce folder, we created earlier, create a new directory, let‚Äôs call in k8s so that we get the below structure.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;‚îú‚îÄ‚îÄ app.jdl
‚îú‚îÄ‚îÄ invoice
‚îú‚îÄ‚îÄ kubernetes
‚îú‚îÄ‚îÄ notification
‚îî‚îÄ‚îÄ store
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the kubernetes directory and navigate to it. Now run the JHipster Kubernetes command there.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ mkdir kubernetes &amp;amp;&amp;amp; cd kubernetes
$ jhipster kubernetes
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generator will ask you a few questions and choose the answers as highlighted below, as you can see the questions are very similar to the ones asked by jhipster docker-compose command. For the ‚Äúbase Docker repository name‚Äù provide your own docker hub account id(For example, my Docker Hub id is &lt;a href=&quot;https://hub.docker.com/u/deepu105/&quot;&gt;deepu105&lt;/a&gt;). For real-world use cases, you could also use a private image repository like the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/aks/tutorial-kubernetes-prepare-acr&quot;&gt;Azure Container Registry&lt;/a&gt; and in that case, you would have to provide the ACR login server name here. For now, let us keep it simple.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;‚éà Welcome to the JHipster Kubernetes Generator ‚éà
Files will be generated in folder: /home/deepu/workspace/temp/ecommerce/kubernetes
‚úî Docker is installed

? Which *type* of application would you like to deploy? Microservice application

? Enter the root directory where your gateway(s) and microservices are located ../

3 applications found at /home/deepu/workspace/temp/ecommerce/
? Which applications do you want to include in your configuration? invoice, notification, store

? Do you want to setup monitoring for your applications ? No

? Which applications do you want to use with clustered databases (only available with MongoDB and Couchbase)? 

JHipster registry detected as the service discovery and configuration provider used by your apps

? Enter the admin password used to secure the JHipster Registry admin

? What should we use for the Kubernetes namespace? jhipster

? What should we use for the base Docker repository name? &amp;lt;your Docker hub account id&amp;gt;

? What command should we use for push Docker image to repository? docker push

? Do you want to enable Istio? No

? Choose the kubernetes service type for your edge services LoadBalancer - Let a kubernetes cloud provider automatically assign an IP
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generator will go to work with this and will create the following files and output.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;   create invoice/invoice-deployment.yml
   create invoice/invoice-service.yml
   create invoice/invoice-mysql.yml
   create notification/notification-deployment.yml
   create notification/notification-service.yml
   create notification/notification-mongodb.yml
   create store/store-deployment.yml
   create store/store-service.yml
   create store/store-mysql.yml
   create README.md
   create registry/jhipster-registry.yml
   create registry/application-configmap.yml
   create kubectl-apply.sh

WARNING! Kubernetes configuration generated with missing images!

To generate the missing Docker image(s), please run:

  ./gradlew -Pprod bootWar jibDockerBuild in /home/deepu/workspace/temp/ecommerce/invoice

  ./gradlew -Pprod bootWar jibDockerBuild in /home/deepu/workspace/temp/ecommerce/notification

  ./gradlew -Pprod bootWar jibDockerBuild in /home/deepu/workspace/temp/ecommerce/store

WARNING! You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

  docker image tag invoice deepu105/invoice
  docker push deepu105/invoice

  docker image tag notification deepu105/notification
  docker push deepu105/notification

  docker image tag store deepu105/store
  docker push deepu105/store

You can deploy all your apps by running the following script:
  ./kubectl-apply.sh

Use these commands to find your application's IP addresses:
  kubectl get svc store

Congratulations, JHipster execution is complete!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see the generator creates all the required Kubernetes configuration files and prints out useful information to proceed further (Note that the docker hub id you provided will be in the instructions in place of &lt;strong&gt;deepu105&lt;/strong&gt; here). Go through the generated k8s files and familiarize yourself.&lt;/p&gt;

&lt;p&gt;Now we are ready.&lt;/p&gt;

&lt;p&gt;Let us build and push the docker images for our application. Follow the instructions above and build docker images in each of the application folders and then tag and push the images to your Docker hub account.&lt;/p&gt;

&lt;h3 id=&quot;preparing-aks-cluster&quot;&gt;Preparing AKS Cluster&lt;/h3&gt;

&lt;p&gt;Now that our applications are built and pushed its time for us to deploy them to AKS. But before that let‚Äôs make sure we have all the prerequisites ready. You will need the below tools.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-kubectl/&quot;&gt;kubectl&lt;/a&gt;: The command line tool to interact with Kubernetes. Install and configure it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot;&gt;Azure CLI&lt;/a&gt;: The command line tool to interact with Azure. Install and log in with your Azure account(You can create a &lt;a href=&quot;https://azure.microsoft.com/en-us/free/&quot;&gt;free account&lt;/a&gt; if you don‚Äôt have one already).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the tools are ready let us prepare our Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;First, let us create a resource group. Run the below command. This will create a resource group named &lt;strong&gt;eCommerceCluster&lt;/strong&gt; in US east location(You can use other &lt;a href=&quot;https://azure.microsoft.com/en-us/global-infrastructure/regions/&quot;&gt;Azure regions&lt;/a&gt; as well).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ az group create --name eCommerceCluster --location eastus
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let us create an AKS cluster on the resource group we just created. Run the below command to create a cluster named eCommerceCluster with two nodes(We would need some room to run all those containers). It also enables the Azure monitor on the cluster through the add-on specified.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ az aks create --resource-group eCommerceCluster \
--name eCommerceCluster --node-count 2 \
--enable-addons monitoring --generate-ssh-keys
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would take several minutes to complete hence be patient and have a coffee :)&lt;/p&gt;

&lt;p&gt;Did I emphasize on &lt;strong&gt;several minutes&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Once it‚Äôs done you should see the cluster information printed out as JSON.&lt;/p&gt;

&lt;p&gt;Now, let us configure &lt;strong&gt;kubectl&lt;/strong&gt; to connect to the AKS cluster we just created. This can be done automatically using the Azure CLI by running the below handy command.&lt;/p&gt;

&lt;p&gt;Note: Some Azure CLI commands might take a while to execute, especially if you are on a slow network, sometimes if the below commands seem stalled or if it is timed out, kill it and retry again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ az aks get-credentials --resource-group eCommerceCluster --name eCommerceCluster
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that we are able to connect to the cluster by running kubectl get nodes&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ kubectl get nodes
NAME                       STATUS    ROLES     AGE       VERSION
aks-nodepool1-34429729-0   Ready     agent     22m       v1.9.9
aks-nodepool1-34429729-1   Ready     agent     22m       v1.9.9
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;deploying-the-application-to-aks&quot;&gt;Deploying the application to AKS&lt;/h3&gt;

&lt;p&gt;Now that our cluster is ready, let us deploy our microservice stack to this cluster.&lt;/p&gt;

&lt;p&gt;We can deploy our application using the kubectl apply command for this we have to navigate to the k8s folder we created earlier and run the below commands in the same order&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ kubectl apply -f registry

$ kubectl apply -f invoice

$ kubectl apply -f notification

$ kubectl apply -f store
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you could also just run the handy &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl-apply.sh&lt;/code&gt; script generated which runs the above.&lt;/p&gt;

&lt;p&gt;So we are deploying the JHipster Registry first as it is required for other services, followed by the microservices and finally our gateway(store).&lt;/p&gt;

&lt;p&gt;If you get a timeout during any of these, as I did, just try the command again.&lt;/p&gt;

&lt;p&gt;Though the services get created fast, the actual applications might not be up and running yet, give the entire thing a minute or two to start.&lt;/p&gt;

&lt;p&gt;Now run kubectl get pods to see the status of our containers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ kubectl get pods -w

NAME                                    READY  STATUS 
invoice-5ffb46d944-h8x42                1/1    Running
invoice-mysql-66bc4b7874-p7ghk          1/1    Running
jhipster-registry-0                     1/1    Running
jhipster-registry-1                     1/1    Running
notification-76847b7667-d7xjb           1/1    Running
notification-mongodb-6db986b556-8bw8z   1/1    Running
store-8dc5cd6f7-s2dpx                   1/1    Running
store-mysql-779d66685d-tmkqd            1/1    Running
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: I have removed some info for brevity in the above output.&lt;/p&gt;

&lt;p&gt;Wait until all the containers are in &lt;strong&gt;Running&lt;/strong&gt; status. Once the containers are running we can run the kubectl get service command to get the external IP for the application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ kubectl get service store

NAME   TYPE         CLUSTER-IP    EXTERNAL-IP    PORT(S)         AGE
store  LoadBalancer 10.0.189.145  40.117.140.228 8080:30143/TCP  18m
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the external IP for our gateway application is &lt;strong&gt;40.117.140.228&lt;/strong&gt; running on port &lt;strong&gt;8080&lt;/strong&gt;. Let us open it up in a web browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2624/1*OQSuDw4u-CHGdkl0VR_DIw.png&quot; alt=&quot;The Gateway application login page&quot; /&gt;&lt;em&gt;The Gateway application login page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The JHipster registry is deployed as a headless service by default. If we need to access the registry we need to create a secondary service with a Load Balancer. Run the below command to expose the second service.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ kubectl expose service jhipster-registry --type=LoadBalancer --name=exposed-registry
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now run the kubectl get service command to get the IP.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ kubectl get service exposed-registry

NAME             TYPE         CLUSTER-IP   EXTERNAL-IP    PORT(S)
exposed-registry LoadBalancer 10.0.107.121 104.211.15.142 8761:32628/TCP
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visit the URL in a browser to see the registry in action&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2978/1*tWbLvvpXCF9kHPmEadyMKQ.png&quot; alt=&quot;JHipster Registry home page&quot; /&gt;&lt;em&gt;JHipster Registry home page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can now scale any of our services by simply running kubectl scale command. For example, let us scale our Invoice service.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ kubectl scale --replicas=2 deployment/invoice
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can visit the &lt;strong&gt;Eureka -&amp;gt; Instances&lt;/strong&gt; on our Registry and see that the Invoice service has two instances.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2596/1*YGhPu44fNsApmKZYXQAaqQ.png&quot; alt=&quot;JHipster Registry instances page&quot; /&gt;&lt;em&gt;JHipster Registry instances page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Running kubectl get pods will also show you the new instance.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ kubectl get pods
 
NAME                                  READY  STATUS   AGE
invoice-5ffb46d944-g8j6j              1/1    Running  4m
invoice-5ffb46d944-h8x42              1/1    Running  2h
invoice-mysql-66bc4b7874-p7ghk        1/1    Running  2h
jhipster-registry-0                   1/1    Running  2h
jhipster-registry-1                   1/1    Running  2h
notification-76847b7667-d7xjb         1/1    Running  2h
notification-mongodb-6db986b556-8bw8z 1/1    Running  2h
store-8dc5cd6f7-s2dpx                 1/1    Running  2h
store-mysql-779d66685d-tmkqd          1/1    Running  2h
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is it, we have successfully got our application deployed to AKS and scaled our service on demand.&lt;/p&gt;

&lt;h3 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h3&gt;

&lt;p&gt;Once you are done its always a good idea to clean up especially since we don‚Äôt want to keep unnecessary resources that might eat up our free credits on Azure.&lt;/p&gt;

&lt;p&gt;Let us delete the cluster from AKS and related resources created by deleting the entire resource group.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ az group delete --name eCommerceCluster --yes --no-wait
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cluster related activities like creation/update/deletion could take several minutes on AKS so we have to be patient again here.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Kubernetes is definitely the best way to deploy microservice applications to production but creating and managing Kubernetes clusters itself is not an easy task, but Kubernetes services like &lt;strong&gt;GKE&lt;/strong&gt; and &lt;strong&gt;AKS&lt;/strong&gt; makes it a cakewalk. In my personal experience, the Kubernetes service from Google(GKE) and Azure(AKS) are by far the best in terms of ease of use and available tooling. These services provide very handy command line tools which work nicely together with &lt;strong&gt;kubectl&lt;/strong&gt; to provide a very nice experience. They also have nice UI portals if you are not a fan of the CLI.&lt;/p&gt;

&lt;p&gt;JHipster provides a great Kubernetes setup to start with which you can further tweak as per your needs and platform.&lt;/p&gt;

&lt;p&gt;In upcoming posts, we will look at more services like GKE(Google), EKS(Amazon) and Openshift(RedHat)&lt;/p&gt;

&lt;p&gt;To learn more about JHipster, check out my book ‚Äú&lt;em&gt;Full Stack Development with JHipster&lt;/em&gt;‚Äù on &lt;a href=&quot;https://www.amazon.com/Stack-Development-JHipster-Deepu-Sasidharan/dp/178847631X&quot;&gt;Amazon&lt;/a&gt; and &lt;a href=&quot;https://www.packtpub.com/application-development/full-stack-development-jhipster&quot;&gt;Packt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like JHipster don‚Äôt forget to give it a star on &lt;a href=&quot;https://github.com/jhipster/generator-jhipster&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My other related posts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://dev.to/deepu105/create-full-microservice-stack-using-jhipster-domain-language-under-30-minutes-4ele&quot;&gt;Create full Microservice stack using JHipster Domain Language under 30 minutes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@deepu105/jhipster-microservices-with-istio-service-mesh-on-kubernetes-a7d0158ba9a3&quot;&gt;JHipster microservices with Istio service mesh on Kubernetes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Originally published in &lt;a href=&quot;https://medium.com/jhipster/deploying-jhipster-microservices-on-azure-kubernetes-service-aks-fb46991746ba&quot;&gt;Medium&lt;/a&gt; on Oct 01, 2018&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/deploying-jhipster-microservices-on-azure-kubernetes-service-aks/</link>
        <guid isPermaLink="true">/deploying-jhipster-microservices-on-azure-kubernetes-service-aks/</guid>
        
        <category>azure,</category>
        
        <category>kubernetes,</category>
        
        <category>jhipster,</category>
        
        <category>microservices</category>
        
        
      </item>
    
      <item>
        <title>Deploy a web app to Azure App Service using Terraform</title>
        <description>&lt;p&gt;Deploying Java web applications to Azure is easy and has been tried, tested and explained many times by many people. My friend &lt;a href=&quot;https://dev.to/jdubois&quot;&gt;Julien Dubois&lt;/a&gt; has a nice series on it &lt;a href=&quot;https://dev.to/azure/creating-a-spring-boot-and-angular-application-for-azure-1-7-2mb8&quot;&gt;here&lt;/a&gt;. Azure makes it really easy to use its &lt;a href=&quot;https://azure.microsoft.com/en-gb/services/app-service/&quot;&gt;App Service&lt;/a&gt; as it provides many different ways of deploying a web app.&lt;/p&gt;

&lt;p&gt;If you are a modern full-stack Java developer there is a high chance that you are deploying your application as a Docker image. Hence today let‚Äôs see how we can deploy a Java web application to Azure App Service using Docker and Terraform in the true spirit of infrastructure as code. The approach is pretty much the same for any web application that is built as a docker image and not necessarily tied down to just Java.&lt;/p&gt;

&lt;p&gt;To try this out you would need to have &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;NodeJS&lt;/a&gt;, &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/install/&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot;&gt;Azure CLI&lt;/a&gt; installed. Follow the links to install them if needed.&lt;/p&gt;

&lt;p&gt;As one of the lead developer of &lt;a href=&quot;https://www.jhipster.tech&quot;&gt;JHipster&lt;/a&gt; (A handy development platform to generate, develop and deploy Spring Boot + Angular/React/Vue Web applications and Spring microservices), I would use a JHipster web application as the example here. So let‚Äôs get started.&lt;/p&gt;

&lt;p&gt;Let‚Äôs build a very simple web application using JHipster. We will use the &lt;a href=&quot;https://www.jhipster.tech/jdl/&quot;&gt;JDL&lt;/a&gt; feature to scaffold our application.&lt;/p&gt;

&lt;p&gt;We will use the below JDL for our application. Save it to a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;app.jdl&lt;/code&gt; in a directory where you want to create the application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-jdl&quot;&gt;application {
    config {
        baseName helloJHipster,
        applicationType monolith,
        packageName tech.jhipster.demo,
        authenticationType jwt,
        buildTool gradle,
        clientFramework react,
        databaseType sql,
        prodDatabaseType mysql,
        languages [en, nl]
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let us scaffold this using JHipster. Open your favorite console/terminal and run the below command in the directory where you saved the above JDL file, make sure it‚Äôs an empty directory.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npx generator-jhipster import-jdl app.jdl
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you already have JHipster &lt;a href=&quot;https://www.jhipster.tech/installation/&quot;&gt;installed&lt;/a&gt; you can just run&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jhipster import-jdl app.jdl
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will scaffold the application and install the required client-side dependencies. It might take a few minutes(NPM!) so maybe its time for that coffee.&lt;/p&gt;

&lt;p&gt;You can see the application in action by running &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew&lt;/code&gt; on the same terminal once the scaffolding is done. You can refer to the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;Readme.md&lt;/code&gt; for more instructions regarding the application.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs move on to the focus of this post, deploying this to Azure App Service with Terraform. Let us first build and publish the docker image for our application.&lt;/p&gt;

&lt;p&gt;JHipster conveniently provides everything that is required to build docker images. Let us use the provided docker integration using &lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;JIB&lt;/a&gt; to build the images. Run the below Gradle command.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./gradlew bootJar &lt;span class=&quot;nt&quot;&gt;-Pprod&lt;/span&gt; jibDockerBuild
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let us tag and push this to our docker registry, make sure you have &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/login/&quot;&gt;logged into docker&lt;/a&gt; and run these commands. Use your own docker hub account name.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag hellojhipster:latest deepu105/hellojhipster:latest
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push deepu105/hellojhipster:latest

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can also push to Azure Container registry instead of Docker Hub if you like.&lt;/p&gt;

&lt;p&gt;Now that our application and Docker images are ready, let‚Äôs prepare the Terraform infrastructure for App Service and MySQL database. For other ways of deploying a JHipster web app to Azure check &lt;a href=&quot;https://www.jhipster.tech/azure/&quot;&gt;this&lt;/a&gt; out.&lt;/p&gt;

&lt;p&gt;First, create a folder for our terraform files. Let‚Äôs name the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now create three files called &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;outputs.tf&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt; in this folder.&lt;/p&gt;

&lt;p&gt;Let us define the variables we will use. Save the below in &lt;code class=&quot;highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-hcl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;prefix&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The prefix used for all resources in this example&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xl&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;location&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The Azure location where all resources in this example should be created&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;subscription_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Azure Subscription ID to be used for billing&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_sql_master_password&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MySql master password&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker_image&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Docker image name&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker_image_tag&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Docker image tag&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let us define our &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, let us add a configuration for Azure resource manager and create an Azure resource group to hold our resources.&lt;/p&gt;

&lt;div class=&quot;language-hcl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;azurerm&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=1.24.0&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;subscription_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.subscription_id}&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;azurerm_resource_group&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.prefix}-resources&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.location}&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let us add the configuration to create a &lt;a href=&quot;https://www.terraform.io/docs/providers/azurerm/r/mysql_server.html&quot;&gt;MySQL database server&lt;/a&gt; along with the required firewall rules to let App Service access the DB. If you want to add local access from your machine add a firewall rule block for your IP as well.&lt;/p&gt;

&lt;div class=&quot;language-hcl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# This creates a MySQL server&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;azurerm_mysql_server&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.prefix}-mysql-server&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_resource_group.main.location}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;resource_group_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_resource_group.main.name}&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B_Gen5_2&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tier&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Basic&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;family&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Gen5&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;storage_profile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;storage_mb&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5120&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;backup_retention_days&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;geo_redundant_backup&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Disabled&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;administrator_login&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysqladminun&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;administrator_login_password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.my_sql_master_password}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;                      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;5.7&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ssl_enforcement&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Disabled&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is the database that our application will use&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;azurerm_mysql_database&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.prefix}_mysql_db&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;resource_group_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_resource_group.main.name}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server_name&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_mysql_server.main.name}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;charset&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;utf8&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;collation&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;utf8_unicode_ci&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This rule is to enable the 'Allow access to Azure services' checkbox&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;azurerm_mysql_firewall_rule&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.prefix}-mysql-firewall&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;resource_group_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_resource_group.main.name}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server_name&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_mysql_server.main.name}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;start_ip_address&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;end_ip_address&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create a MySQL server, a database for our app on the server and enable access from App Service.&lt;/p&gt;

&lt;p&gt;Now let us configure the &lt;a href=&quot;https://www.terraform.io/docs/providers/azurerm/r/app_service.html&quot;&gt;App Service&lt;/a&gt; itself along with a service plan.&lt;/p&gt;

&lt;div class=&quot;language-hcl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# This creates the plan that the service use&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;azurerm_app_service_plan&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.prefix}-asp&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_resource_group.main.location}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;resource_group_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_resource_group.main.name}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;kind&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Linux&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;reserved&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;sku&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Standard&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;S1&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This creates the service definition&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;azurerm_app_service&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.prefix}-appservice&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_resource_group.main.location}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;resource_group_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_resource_group.main.name}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app_service_plan_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_app_service_plan.main.id}&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;site_config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app_command_line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;linux_fx_version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DOCKER|${var.docker_image}:${var.docker_image_tag}&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;always_on&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;app_settings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;WEBSITES_ENABLE_APP_SERVICE_STORAGE&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;DOCKER_REGISTRY_SERVER_URL&quot;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://index.docker.io&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# These are app specific environment variables&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;SPRING_PROFILES_ACTIVE&quot;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;prod,swagger&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;SPRING_DATASOURCE_URL&quot;&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jdbc:mysql://${azurerm_mysql_server.main.fqdn}:3306/${azurerm_mysql_database.main.name}?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;useLegacyDatetimeCode=false&amp;amp;serverTimezone=UTC&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;SPRING_DATASOURCE_USERNAME&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_mysql_server.main.administrator_login}@${azurerm_mysql_server.main.name}&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;SPRING_DATASOURCE_PASSWORD&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${var.my_sql_master_password}&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this configuration, under &lt;code class=&quot;highlighter-rouge&quot;&gt;site_config&lt;/code&gt; we use &lt;code class=&quot;highlighter-rouge&quot;&gt;linux_fx_version&lt;/code&gt; to declare our docker image and set &lt;code class=&quot;highlighter-rouge&quot;&gt;always_on&lt;/code&gt; to true so that the application is not shut down when there is inactivity for some time.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;app_settings&lt;/code&gt; section we need to disable storage using the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;WEBSITES_ENABLE_APP_SERVICE_STORAGE&lt;/code&gt; and also specify &lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_REGISTRY_SERVER_URL&lt;/code&gt;. Everything else is specific to our app. The flags passed to the MySQL connection URL is important.&lt;/p&gt;

&lt;p&gt;Now that our &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; is ready let us define some output properties that are handy. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;outputs.tf&lt;/code&gt; file add the below&lt;/p&gt;

&lt;div class=&quot;language-hcl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app_service_name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${azurerm_app_service.main.name}&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app_service_default_hostname&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://${azurerm_app_service.main.default_site_hostname}&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are ready to rock and roll! let us deploy the app. Make sure you have set up your Azure CLI and have &lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli?view=azure-cli-latest&quot;&gt;logged in&lt;/a&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;az login&lt;/code&gt;. Now in a terminal/console navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform&lt;/code&gt; folder we created and execute these commands. Please change the values for &lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;docker_image&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;terraform init

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;terraform apply &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myAwesomeApp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;northeurope &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;docker_image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;deepu105/hellojhipster &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;docker_image_tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;latest
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will prompt you to enter a master password for MySQL server and your Azure subscription ID(You can find this from Azure portal or by running &lt;code class=&quot;highlighter-rouge&quot;&gt;az account list&lt;/code&gt;- the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; field is the subscription ID). Once you provide the values and confirm, Terraform will get to work and will start creating the resources. this could take a while since we are provisioning a Database server. Wait for it or go have that second coffee ;)&lt;/p&gt;

&lt;p&gt;Once the deployment is complete, Terraform will print out the outputs which include the &lt;code class=&quot;highlighter-rouge&quot;&gt;app_service_default_hostname&lt;/code&gt;. Copy the URL and open it in your favorite browser. The first time could take a while since the app will be started(cold start) only during the first request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/t5kcj7r3r9w6bxghe350.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I hope you found this useful. This is my first post in &lt;a href=&quot;https://dev.to/deepu105&quot;&gt;dev.to&lt;/a&gt;, I hope to migrate my blogs from &lt;a href=&quot;https://medium.com/@deepu105&quot;&gt;Medium&lt;/a&gt; to &lt;a href=&quot;https://dev.to/deepu105&quot;&gt;dev.to&lt;/a&gt; soon.&lt;/p&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My other related posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@deepu105/create-full-microservice-stack-using-jhipster-domain-language-under-30-minutes-ecc6e7fc3f77&quot;&gt;Create full Microservice stack using JHipster Domain Language under 30 minutes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@deepu105/deploying-jhipster-microservices-on-azure-kubernetes-service-aks-fb46991746ba&quot;&gt;Deploying JHipster Microservices on Azure Kubernetes Service (AKS)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/jhipster-microservices-with-istio-service-mesh-on-kubernetes-a7d0158ba9a3&quot;&gt;How to set up JHipster microservices with Istio service mesh on Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/xebialabs/continuous-delivery-of-microservices-with-xebialabs-a-k-a-devops-as-code-b5f0c3b2b1c8&quot;&gt;Continuous delivery of Microservices with XebiaLabs‚Ää‚Äî‚Ääa.k.a DevOps as Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/deploy-a-web-app-to-azure-app-service-using-terraform/</link>
        <guid isPermaLink="true">/deploy-a-web-app-to-azure-app-service-using-terraform/</guid>
        
        <category>java,</category>
        
        <category>jhipster,</category>
        
        <category>azure,</category>
        
        <category>terraform</category>
        
        
      </item>
    
      <item>
        <title>Create full Microservice stack using JHipster Domain Language under 30 minutes</title>
        <description>&lt;p&gt;It‚Äôs been quite a while since I wrote a blog, I did &lt;a href=&quot;https://mytechnorage.blogspot.com/&quot;&gt;a few&lt;/a&gt; some years ago but never really continued writing. So when I decided to start writing again, I didn‚Äôt have to think a lot about a topic as it was very obvious ‚Äî &lt;a href=&quot;https://www.jhipster.tech/&quot;&gt;JHipster&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JHipster is a development platform for Java web applications and microservices development. If you are a JVM developer you might have already heard about &lt;a href=&quot;https://www.jhipster.tech/&quot;&gt;JHipster&lt;/a&gt;. If not, well, you are missing out on a lot and I highly recommend you check it out. You can also check out my book ‚Äú&lt;strong&gt;Full Stack Development with JHipster&lt;/strong&gt;‚Äù on &lt;a href=&quot;https://www.amazon.com/Stack-Development-JHipster-Deepu-Sasidharan/dp/178847631X&quot;&gt;Amazon&lt;/a&gt; and &lt;a href=&quot;https://www.packtpub.com/application-development/full-stack-development-jhipster&quot;&gt;Packt&lt;/a&gt; to learn about JHipster.&lt;/p&gt;

&lt;p&gt;I have been working on JHipster from April 2015 and the coolest feature that I got to implement so far is definitely multiple applications generation using JDL. This feature is available in the latest version of JHipster. If you are not familiar with JDL, I recommend you to check out the docs at &lt;a href=&quot;https://www.jhipster.tech/jdl/&quot;&gt;https://www.jhipster.tech/jdl/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-e-commerce-application&quot;&gt;The E-Commerce application&lt;/h2&gt;

&lt;p&gt;So let us see how we can create a microservice stack using JHipster. We will build an e-commerce store today. The stack includes-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Service discovery using &lt;a href=&quot;https://www.jhipster.tech/jhipster-registry/&quot;&gt;JHipster Registry&lt;/a&gt;, a Spring boot application that packs Eureka server and Spring cloud config server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.jhipster.tech/api-gateway/&quot;&gt;API management and Gateway&lt;/a&gt; using Spring Boot, Netflix Zuul, ReactJS, and Swagger.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Microservices using Spring Boot.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Monitoring using &lt;a href=&quot;https://www.jhipster.tech/monitoring/#jhipster-console&quot;&gt;JHipster Console&lt;/a&gt; which is made of the Elastic stack(ELK) and Zipkin.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*b4krMVZ-mqjxAIh_EM1jhQ.png&quot; alt=&quot;Microservice application architecture&quot; /&gt;&lt;em&gt;Microservice application architecture&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Gateway routes incoming requests to two microservices, Invoice application, and Notification application.&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;In order to follow this tutorial, you would need a recent version of &lt;strong&gt;Docker&lt;/strong&gt;, &lt;strong&gt;Docker-compose&lt;/strong&gt;, &lt;strong&gt;NodeJS&lt;/strong&gt; and &lt;strong&gt;Java&lt;/strong&gt; installed on your computer. The below are the versions I have installed(&lt;strong&gt;Update&lt;/strong&gt;: With JHipster 6+ you can use Java 11 &amp;amp; 12).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ docker -v                                                                                                                       
Docker version 18.06.1-ce, build e68fc7a

$ docker-compose -v                                
docker-compose version 1.20.1, build 5d8c71b

$ node -v                
v8.11.4

$ java -version          
openjdk version &quot;1.8.0_212&quot;
OpenJDK Runtime Environment (Zulu 8.38.0.13-CA-linux64) (build 1.8.0_212-b04)
OpenJDK 64-Bit Server VM (Zulu 8.38.0.13-CA-linux64) (build 25.212-b04, mixed mode)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, install the latest version of JHipster&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ npm install generator-jhipster -g
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that you have version &lt;strong&gt;5.3.4&lt;/strong&gt; or above by running&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ jhipster --version
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-the-jdl&quot;&gt;Creating the JDL&lt;/h3&gt;

&lt;p&gt;Now let us create our JDL. Head over to the &lt;a href=&quot;https://start.jhipster.tech/jdl-studio/&quot;&gt;JDL Studio&lt;/a&gt; or your favorite IDE/Editor(&lt;em&gt;You can use &lt;a href=&quot;https://www.jhipster.tech/jhipster-ide/&quot;&gt;JHipster IDE&lt;/a&gt; plugin if you like&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;First, let us define our applications. We will start with the Gateway&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;application {
  config {
    baseName store,
    applicationType gateway,
    packageName com.jhipster.demo.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    buildTool gradle,
    clientFramework react,
    testFrameworks [protractor]
  }
  entities *
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most of the options are self-explanatory, we are building an application named &lt;strong&gt;Store&lt;/strong&gt; of type &lt;strong&gt;Gateway&lt;/strong&gt; with &lt;strong&gt;JWT&lt;/strong&gt; authentication and &lt;strong&gt;Eureka&lt;/strong&gt;-based service discovery. The application uses a &lt;strong&gt;MySQL&lt;/strong&gt; database and &lt;strong&gt;Hazelcast&lt;/strong&gt; for the cache. It‚Äôs built using &lt;strong&gt;Gradle&lt;/strong&gt;. For the client-side, it uses &lt;strong&gt;React&lt;/strong&gt; and &lt;strong&gt;Sass&lt;/strong&gt;. It also has &lt;strong&gt;Protractor&lt;/strong&gt; for end-to-end testing.&lt;/p&gt;

&lt;p&gt;At the end of the definition you can see &lt;code class=&quot;highlighter-rouge&quot;&gt;entities *&lt;/code&gt;, we will come to this later.&lt;/p&gt;

&lt;p&gt;Now let us define our Invoice microservice&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;application {
  config {
    baseName invoice,
    applicationType microservice,
    packageName com.jhipster.demo.invoice,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    buildTool gradle,
    serverPort 8081
  }
  entities Invoice, Shipment
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It follows similar options like our Gateway and since it is microservice it doesn‚Äôt define any client-side options and also skips user management as it will be handled by the Gateway. Additionally, we have also mentioned a custom port &lt;strong&gt;8081&lt;/strong&gt; since we do not want this application to conflict with the default port 8080 used by the Gateway.&lt;/p&gt;

&lt;p&gt;Now let us define the second microservice, the Notification application&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;application {
  config {
    baseName notification,
    applicationType microservice,
    packageName com.jhipster.demo.notification,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    databaseType mongodb,
    cacheProvider no,
    enableHibernateCache false,
    buildTool gradle,
    serverPort 8082
  }
  entities Notification
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This application follows many options similar to the Gateway and Invoice application but instead of using MySQL it uses &lt;strong&gt;MongoDB&lt;/strong&gt; as its database and also disables cache.&lt;/p&gt;

&lt;p&gt;Now that our application definitions are done, we will proceed to define our entity model.&lt;/p&gt;

&lt;p&gt;For our Gateway store application, let us define the below entities and enums&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;/** Product sold by the Online store */
entity Product {
    name String required
    description String
    price BigDecimal required min(0)
    size Size required
    image ImageBlob
}

enum Size {
    S, M, L, XL, XXL
}

entity ProductCategory {
    name String required
    description String
}

entity Customer {
    firstName String required
    lastName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum Gender {
    MALE, FEMALE, OTHER
}

entity ProductOrder {
    placedDate Instant required
    status OrderStatus required
    code String required
    invoiceId Long
}

enum OrderStatus {
    COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
    quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus {
    AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

relationship OneToOne {
    Customer{user(login) required} to User
}

relationship ManyToOne {
    OrderItem{product(name) required} to Product
}

relationship OneToMany {
    Customer{order} to ProductOrder{customer(email) required},
    ProductOrder{orderItem} to OrderItem{order(code) required},
    ProductCategory{product} to Product{productCategory(name)}
}

service Product, ProductCategory, Customer, ProductOrder, OrderItem with serviceClass
paginate Product, Customer, ProductOrder, OrderItem with pagination
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The JDL defines the entities, enums, the relationship between entities and options like pagination and service layer.&lt;/p&gt;

&lt;p&gt;The entity field definition follows the syntax&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;entity &amp;lt;entity name&amp;gt; {
  &amp;lt;field name&amp;gt; &amp;lt;type&amp;gt; [&amp;lt;validation&amp;gt;*]
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The relationship definition follows the syntax&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;relationship (OneToMany | ManyToOne | OneToOne | ManyToMany) {
    &amp;lt;from entity&amp;gt;[{&amp;lt;relationship name&amp;gt;[(&amp;lt;display field&amp;gt;)]}] 
    to 
    &amp;lt;to entity&amp;gt;[{&amp;lt;relationship name&amp;gt;[(&amp;lt;display field&amp;gt;)]}]
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Refer the &lt;a href=&quot;https://www.jhipster.tech/jdl/&quot;&gt;JDL docs&lt;/a&gt; for full DSL reference.&lt;/p&gt;

&lt;p&gt;The Invoice microservice application has the following entities&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;entity Invoice {
    code String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}

entity Shipment {
    trackingCode String
    date Instant required
    details String
}

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

relationship OneToMany {
    Invoice{shipment} to Shipment{invoice(code) required}
}

service Invoice, Shipment with serviceClass
paginate Invoice, Shipment with pagination
microservice Invoice, Shipment with invoice
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pay attention to the last &lt;strong&gt;microservice&lt;/strong&gt; option declared here, it specifies that these entities belong to the microservice named &lt;strong&gt;invoice&lt;/strong&gt; so that our Gateway knows where to route requests for these entities.&lt;/p&gt;

&lt;p&gt;Now let us see the entities for the Notification microservice application&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;entity Notification {
    date Instant required
    details String
    sentDate Instant required
    format NotificationType required
    userId Long required
    productId Long required
}

enum NotificationType {
    EMAIL, SMS, PARCEL
}

microservice Notification with notification
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let us go back to the entities keyword we used in our application definitions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;application {
  config {
    ...
  }
  entities *
}

application {
  config {
    ...
  }
  entities Invoice, Shipment
}

application {
  config {
    ...
  }
  entities Notification
}

/* Entities for Store Gateway */

entity Product {
    ...
}

entity ProductCategory {
    ...
}

entity Customer {
    ...
}

entity ProductOrder {
    ...
}

entity OrderItem {
    ...
}

microservice Invoice, Shipment with invoice

/* Entities for Invoice microservice */
entity Invoice {
    ...
}

entity Shipment {
    ...
}

/* Entities for notification microservice */

entity Notification {
    ...
}

microservice Notification with notification
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we instruct the store gateway application that it should contain all the entities defined in the JDL and the gateway will know to skip server-side code for the entities that belong to another microservice and hence will only generate the client-side code for those, here namely &lt;strong&gt;Invoice&lt;/strong&gt;, &lt;strong&gt;Shipment&lt;/strong&gt;, and &lt;strong&gt;Notification&lt;/strong&gt;. We also instruct the Invoice application and Notification application to include its entities.&lt;/p&gt;

&lt;h3 id=&quot;generating-the-applications&quot;&gt;Generating the applications&lt;/h3&gt;

&lt;p&gt;Create a folder where we want to create our microservice stack.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ mkdir ecommerce &amp;amp;&amp;amp; cd ecommerce
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let us put everything together into a JDL file. Let us call it &lt;code class=&quot;highlighter-rouge&quot;&gt;app.jdl&lt;/code&gt; and save it into this folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;application {
  config {
    baseName store,
    applicationType gateway,
    packageName com.jhipster.demo.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    cacheProvider hazelcast,
    buildTool gradle,
    clientFramework react,
    testFrameworks [protractor]
  }
  entities *
}

application {
  config {
    baseName invoice,
    applicationType microservice,
    packageName com.jhipster.demo.invoice,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    buildTool gradle,
    serverPort 8081
  }
  entities Invoice, Shipment
}

application {
  config {
    baseName notification,
    applicationType microservice,
    packageName com.jhipster.demo.notification,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    databaseType mongodb,
    cacheProvider no,
    enableHibernateCache false,
    buildTool gradle,
    serverPort 8082
  }
  entities Notification
}

/* Entities for Store Gateway */

/** Product sold by the Online store */
entity Product {
    name String required
    description String
    price BigDecimal required min(0)
    size Size required
    image ImageBlob
}

enum Size {
    S, M, L, XL, XXL
}

entity ProductCategory {
    name String required
    description String
}

entity Customer {
    firstName String required
    lastName String required
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum Gender {
    MALE, FEMALE, OTHER
}

entity ProductOrder {
    placedDate Instant required
    status OrderStatus required
    code String required
    invoiceId Long
}

enum OrderStatus {
    COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
    quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus {
    AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

relationship OneToOne {
    Customer{user(login) required} to User
}

relationship ManyToOne {
 OrderItem{product(name) required} to Product
}

relationship OneToMany {
   Customer{order} to ProductOrder{customer(email) required},
   ProductOrder{orderItem} to OrderItem{order(code) required} ,
   ProductCategory{product} to Product{productCategory(name)}
}

service Product, ProductCategory, Customer, ProductOrder, OrderItem with serviceClass
paginate Product, Customer, ProductOrder, OrderItem with pagination

/* Entities for Invoice microservice */
entity Invoice {
    code String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}

entity Shipment {
    trackingCode String
    date Instant required
    details String
}

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

relationship OneToMany {
    Invoice{shipment} to Shipment{invoice(code) required}
}

service Invoice, Shipment with serviceClass
paginate Invoice, Shipment with pagination
microservice Invoice, Shipment with invoice

/* Entities for notification microservice */

entity Notification {
    date Instant required
    details String
    sentDate Instant required
    format NotificationType required
    userId Long required
    productId Long required
}

enum NotificationType {
    EMAIL, SMS, PARCEL
}

microservice Notification with notification
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let us invoke JHipster CLI to import this file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ jhipster import-jdl app.jdl
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create the &lt;strong&gt;store&lt;/strong&gt;, &lt;strong&gt;invoice&lt;/strong&gt; and &lt;strong&gt;notification&lt;/strong&gt; folders and will do the below in each of the folders&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Generate the appropriate application and entities configuration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate the application and entities source code based on the configurations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the NPM dependencies for the application.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the process is complete you should see the below on your console&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Entity Product generated successfully.
Entity ProductCategory generated successfully.
Entity Customer generated successfully.
Entity ProductOrder generated successfully.
Entity OrderItem generated successfully.
Entity Invoice generated successfully.
Entity Shipment generated successfully.
Entity Notification generated successfully.
Congratulations, JHipster execution is complete!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Walk around the generated code to familiarize yourself.&lt;/p&gt;

&lt;h3 id=&quot;running-the-applications-with-docker&quot;&gt;Running the applications with Docker&lt;/h3&gt;

&lt;p&gt;Now that our applications are created its time to test them locally using Docker. To do this first let us generate some docker compose configurations using JHipster.&lt;/p&gt;

&lt;p&gt;Create a new folder inside the &lt;strong&gt;ecommerce&lt;/strong&gt; folder and run the JHipster docker-compose command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ mkdir docker-compose &amp;amp;&amp;amp; cd docker-compose
$ jhipster docker-compose
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will prompt you with a few questions, choose the answers as highlighted below&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;üê≥  Welcome to the JHipster Docker Compose Sub-Generator üê≥
Files will be generated in folder: /home/deepu/workspace/temp/ecommerce/docker-compose
‚úî Docker is installed

? Which *type* of application would you like to deploy? Microservice application

? Which *type* of gateway would you like to use? JHipster gateway based on Netflix Zuul

? Enter the root directory where your gateway(s) and microservices are located ../

3 applications found at /home/deepu/workspace/temp/ecommerce/
? Which applications do you want to include in your configuration? invoice, notification, store

? Which applications do you want to use with clustered databases (only available with MongoDB and Couchbase)? 

? Do you want to setup monitoring for your applications ? Yes, for logs and metrics with the JHipster Console (based on ELK and Zipkin)

? You have selected the JHipster Console which is based on the ELK stack and additional technologies, which one do you want to use ? Zipkin, for distributed tracing (only compatible with
 JHipster &amp;gt;= v4.2.0)

JHipster registry detected as the service discovery and configuration provider used by your apps
? Enter the admin password used to secure the JHipster Registry? admin
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will generate all the required docker-compose configurations for the stack and will also print out further instructions to build the docker images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the latest JHipster versions we migrated to using &lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;Jib&lt;/a&gt; for creating Docker images. This is a huge improvement over the Docker Maven plugin that we were using, as a result the command to create an image has changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew -Pprod bootWar jibDockerBuild&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Docker Compose configuration generated with missing images!
To generate the missing Docker image(s), please run:
  ./gradlew -Pprod bootWar jibDockerBuild in /home/deepu/workspace/temp/ecommerce/invoice
  ./gradlew -Pprod bootWar jibDockerBuild in /home/deepu/workspace/temp/ecommerce/notification
  ./gradlew -Pprod bootWar jibDockerBuild in /home/deepu/workspace/temp/ecommerce/store
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Follow the instructions and build the docker images. Once all 3 images are built run the below command from the &lt;strong&gt;docker-compose&lt;/strong&gt; folder to fire everything up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ docker-compose up -d
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the containers start you can stream the logs using below command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ docker-compose logs -f
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now point your favorite browser to &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; and see the E-Commerce microservice application in action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2604/1*NR3QX_Q88_a4cWJ9X3fcnw.png&quot; alt=&quot;Gateway application(Store)&quot; /&gt;&lt;em&gt;Gateway application(Store)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can see the JHipster registry in action at &lt;a href=&quot;http://localhost:8761/#/&quot;&gt;http://localhost:8761/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2604/1*F-MV1Q_jsBvUHHeInJR8TA.png&quot; alt=&quot;JHipster Registry&quot; /&gt;&lt;em&gt;JHipster Registry&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And finally the JHipster console at &lt;a href=&quot;http://localhost:5601&quot;&gt;http://localhost:5601&lt;/a&gt;/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2616/1*v2tJsdLIJcVwm7RDAI_YVg.png&quot; alt=&quot;JHipster Console- Kibana dashboard&quot; /&gt;&lt;em&gt;JHipster Console- Kibana dashboard&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you are done playing around, you can shut everything down by running the below command on the &lt;strong&gt;docker-compose&lt;/strong&gt; folder&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker-compose down
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hope you had fun creating microservices using JHipster. To learn how to convert a JHipster monolith to microservices check out my book ‚Äú&lt;em&gt;Full Stack Development with JHipster&lt;/em&gt;‚Äù on &lt;a href=&quot;https://www.amazon.com/Stack-Development-JHipster-Deepu-Sasidharan/dp/178847631X&quot;&gt;Amazon&lt;/a&gt; and &lt;a href=&quot;https://www.packtpub.com/application-development/full-stack-development-jhipster&quot;&gt;Packt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the coming weeks, I‚Äôll write some posts about deploying this microservice stack to various cloud providers like GCP, Azure, AWS, Heroku and so on.&lt;/p&gt;

&lt;p&gt;If you like JHipster don‚Äôt forget to give it a star on &lt;a href=&quot;https://github.com/jhipster/generator-jhipster&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My other related posts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://dev.to/deepu105/deploying-jhipster-microservices-on-azure-kubernetes-service-aks-2g6d&quot;&gt;Deploying JHipster Microservices on Azure Kubernetes Service (AKS)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@deepu105/jhipster-microservices-with-istio-service-mesh-on-kubernetes-a7d0158ba9a3&quot;&gt;JHipster microservices with Istio service mesh on Kubernetes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Originally published in &lt;a href=&quot;https://medium.com/jhipster/create-full-microservice-stack-using-jhipster-domain-language-under-30-minutes-ecc6e7fc3f77&quot;&gt;Medium&lt;/a&gt; on Sep 22, 2018&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/create-full-microservice-stack-using-j-hipster-domain-language-under-30-minutes/</link>
        <guid isPermaLink="true">/create-full-microservice-stack-using-j-hipster-domain-language-under-30-minutes/</guid>
        
        <category>jhipster,</category>
        
        <category>java,</category>
        
        <category>microservices,</category>
        
        <category>docker</category>
        
        
      </item>
    
      <item>
        <title>Configure a beautiful terminal on Unix with Zsh</title>
        <description>&lt;p&gt;I was a long time Windows user, a fairly happy one, but as a developer, there were a lot of things that were missing for me and one of the main was the terminal experience. I‚Äôm not a fan of the closed ecosystem of Apple so Linux was an easy choice for me and I switched to Linux almost 3 years ago. I did start out with Ubuntu and later switched to Fedora which is my primary OS now. You can read about my setup &lt;a href=&quot;https://dev.to/deepu105/my-beautiful-linux-development-environment-2afc&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a senior developer and open source community lead, I spent a lot of time on the terminal and a terminal with a nice developer experience instantly makes you happier and more productive. The default bash terminal is good for beginners but if you really want a powerful terminal you need something more than bash.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how to configure a powerful and productive terminal experience. The setup is based on what I have configured on my Fedora machine. The same setup can be recreated on any other Linux distribution, BSD or Mac as well. You just need to use the installation instruction from the tools for the given platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/fhwstp9251al105hp899.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below are the tools we would need for this.&lt;/p&gt;

&lt;h2 id=&quot;zsh&quot;&gt;Zsh&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zsh.org/&quot;&gt;Zsh&lt;/a&gt; is one of the most feature-rich shells for Unix. It works on Linux, Mac, &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/about&quot;&gt;WSL&lt;/a&gt;, and BSD. There are alternatives like &lt;a href=&quot;https://fishshell.com/&quot;&gt;Fish&lt;/a&gt; which also offers similar features but I personally like Zsh.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Check if Zsh is already installed by running &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh --version&lt;/code&gt; on your terminal. If not found, install it using your package manager.
    &lt;ul&gt;
      &lt;li&gt;Fedora: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo dnf install zsh&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Mac: &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install zsh zsh-completions&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;RHEL/CentOS: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo yum update &amp;amp;&amp;amp; sudo yum -y install zsh&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Ubuntu/Debian: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install zsh&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;For other platform refer &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH#how-to-install-zsh-in-many-platforms&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now make Zsh your default shell by running &lt;code class=&quot;highlighter-rouge&quot;&gt;chsh -s $(which zsh)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Log out and log in back again to use your new default shell.&lt;/li&gt;
  &lt;li&gt;Test that it worked with echo &lt;code class=&quot;highlighter-rouge&quot;&gt;$SHELL&lt;/code&gt;. Expected result: &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/zsh&lt;/code&gt; or similar.&lt;/li&gt;
  &lt;li&gt;Test with &lt;code class=&quot;highlighter-rouge&quot;&gt;$SHELL --version&lt;/code&gt;. Expected result: &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh 5.6.2&lt;/code&gt; or similar&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: If you have installed Zsh for the first time and launch the shell it would prompt you to configure some settings. You can choose to ignore that by hitting &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; as we will configure it later on.&lt;/p&gt;

&lt;h2 id=&quot;oh-my-zsh&quot;&gt;Oh-My-Zsh&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh-My-Zsh&lt;/a&gt; gives the Zsh shell superpowers. Its a framework to manage Zsh configuration. It has plugins and themes for Zsh(A lot of them).&lt;/p&gt;

&lt;p&gt;From their Github page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Once installed, your terminal shell will become the talk of the town or your money back! With each keystroke in your command prompt, you‚Äôll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in caf√©s and ask you, ‚Äúthat is amazing! are you some sort of genius?‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just install it. You need it :)&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;terminal-emulatormultiplexer&quot;&gt;Terminal emulator/multiplexer&lt;/h2&gt;

&lt;p&gt;Optionally you can use a Terminal emulator that can manage windows and panes for you.&lt;/p&gt;

&lt;p&gt;For Linux I would recommend using &lt;a href=&quot;https://gnunn1.github.io/tilix-web/&quot;&gt;Tilix&lt;/a&gt;, I have been using it for 3 years and its just amazing.&lt;/p&gt;

&lt;p&gt;For Mac, you can use &lt;a href=&quot;https://iterm2.com/index.html&quot;&gt;iTerm2&lt;/a&gt; which is very popular.&lt;/p&gt;

&lt;p&gt;Alternatively, you can also use &lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;tmux&lt;/a&gt; if you want something lighter on your existing Terminal app on Linux, BSD or Mac.&lt;/p&gt;

&lt;h2 id=&quot;configuring-zsh&quot;&gt;Configuring Zsh&lt;/h2&gt;

&lt;p&gt;This is the fun part. Let us make the terminal awesome.&lt;/p&gt;

&lt;h3 id=&quot;install-plugins&quot;&gt;Install plugins&lt;/h3&gt;
&lt;p&gt;First, let us install some additional plugins that are not bundled with Oh-My-Zsh.&lt;/p&gt;

&lt;h4 id=&quot;zsh-autosuggestions&quot;&gt;&lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot;&gt;zsh-autosuggestions&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Provides auto completion for shell commands.&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions&lt;/code&gt; to install&lt;/p&gt;
&lt;h4 id=&quot;zsh-syntax-highlighting&quot;&gt;&lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot;&gt;zsh-syntax-highlighting&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Provides syntax highlighting on the shell.&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting&lt;/code&gt; to install&lt;/p&gt;

&lt;h4 id=&quot;autojump&quot;&gt;&lt;a href=&quot;https://github.com/wting/autojump&quot;&gt;autojump&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Provides a smarter directory navigation system.
Install autojump for your OS following instructions &lt;a href=&quot;https://github.com/wting/autojump#automatic&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let us configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; file with some settings. &lt;a href=&quot;https://gist.github.com/deepu105/9723cb70032eca98ff09d110369af67a&quot;&gt;Here&lt;/a&gt; is my full &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; file. Your mileage may vary.&lt;/p&gt;

&lt;h3 id=&quot;add-exports&quot;&gt;Add exports&lt;/h3&gt;
&lt;p&gt;We will start with some exports.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xterm-256color&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This sets up colors properly&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# set shell&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/zsh

&lt;span class=&quot;c&quot;&gt;# If you come from bash you might have to change your $PATH.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NODE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NODE_PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.npm-global/lib/node_modules
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/java/latest
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;/bin:~/.npm-global/bin:&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/bin:/usr/local/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add exports from your profile&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.profile
&lt;span class=&quot;c&quot;&gt;# Path to your oh-my-zsh installation.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZSH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.oh-my-zsh
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;zsh-settings&quot;&gt;Zsh settings&lt;/h3&gt;

&lt;p&gt;Now we can configure some Zsh specific settings&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;DISABLE_MAGIC_FUNCTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZSH_AUTOSUGGEST_MANUAL_REBIND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nv&quot;&gt;COMPLETION_WAITING_DOTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DISABLE_UNTRACKED_FILES_DIRTY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;zsh-theme&quot;&gt;Zsh theme&lt;/h3&gt;

&lt;p&gt;Now, Let‚Äôs set up a nice theme. I‚Äôm using &lt;a href=&quot;https://github.com/romkatv/powerlevel10k&quot;&gt;&lt;strong&gt;powerlevel10k&lt;/strong&gt;&lt;/a&gt; as my current theme and it‚Äôs fast and looks great. You can use the default or you can choose any theme you like from the list &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Themes&quot;&gt;here&lt;/a&gt;. If you like my theme then follow these instructions. Thanks to &lt;a href=&quot;https://github.com/romkatv&quot;&gt;Roman Perepelitsa&lt;/a&gt; for some &lt;a href=&quot;https://github.com/romkatv/powerlevel10k/issues/90#issuecomment-503599702&quot;&gt;cool tips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k&lt;/code&gt; to install the theme.&lt;/p&gt;

&lt;p&gt;Install a &lt;a href=&quot;https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions#step-2-install-a-powerline-font&quot;&gt;Powerline font&lt;/a&gt;. I use &lt;a href=&quot;https://github.com/adobe-fonts/source-code-pro&quot;&gt;Adobe Source Code Pro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the below configuration to the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Set name of the theme to load. Optionally, if you set this to &quot;random&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# it'll load a random theme each time that oh-my-zsh is loaded.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ZSH_THEME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;powerlevel10k/powerlevel10k&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;############ POWERLEVEL THEME SETTINGS ##############&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'awesome-fontconfig'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_LEFT_PROMPT_ELEMENTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;vcs nvm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;disk_usage &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_PROMPT_ADD_NEWLINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_PROMPT_ON_NEWLINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_SHOW_RULER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_RULER_CHAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'‚îÄ'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_RULER_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_RULER_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;237

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_LEFT_SEGMENT_END_SEPARATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_RIGHT_SEGMENT_END_SEPARATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_SHORTEN_DIR_LENGTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_SHORTEN_STRATEGY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;truncate_middle&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_SHOW_WRITABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DISK_USAGE_NORMAL_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DISK_USAGE_WARNING_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;magenta
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DISK_USAGE_CRITICAL_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;red
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_TIME_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_TIME_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;white

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_HOME_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_ETC_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_DEFAULT_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_NOT_WRITABLE_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_HOME_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;blue
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;blue
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_ETC_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;blue
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_DEFAULT_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;blue
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_NOT_WRITABLE_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;red

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_OS_ICON_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;white&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_OS_ICON_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_GIT_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%fon %F{040}\uf1d3 '&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_GIT_GITHUB_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%fon %F{040}\uf09b '&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_GIT_BITBUCKET_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%fon %F{040}\uf171 '&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_GIT_GIT_GITLAB_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%fon %F{040}\uf296 '&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_CLEAN_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_MODIFIED_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_LOADING_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_CLEAN_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;040&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_MODIFIED_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yellow&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_LOADING_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;grey&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_UNTRACKED_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$'%{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;?%}'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_UNSTAGED_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$'%{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;!%}'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_VCS_STAGED_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$'%{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;+%}'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_COLOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;red
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_LOCK_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;f023'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%F{%(?.green.red)}${${${KEYMAP:-0}:#vicmd}:+‚ùØ}${${$((!${#${KEYMAP:-0}:#vicmd})):#0}:+‚ùÆ}%f '&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_NVM_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_NVM_FOREGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;green
&lt;span class=&quot;nv&quot;&gt;POWERLEVEL9K_NODE_ICON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%fvia %F{green}‚¨¢'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;############ END- POWERLEVEL THEME SETTINGS ##############&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enable-plugins&quot;&gt;Enable plugins&lt;/h3&gt;

&lt;p&gt;We can finish off by enabling the plugins and some tweaks&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;zsh-autosuggestions git docker docker-compose autojump zsh-syntax-highlighting dnf npm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ZSH&lt;/span&gt;/oh-my-zsh.sh

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that‚Äôs it we are ready. Start a new terminal session and enjoy.&lt;/p&gt;

&lt;h3 id=&quot;issues--workarounds&quot;&gt;Issues &amp;amp; workarounds&lt;/h3&gt;

&lt;p&gt;If you use Tilix as your terminal emulator, then this might be required for proper pane splitting. Add this to your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TILIX_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /etc/profile.d/vte.sh
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are getting errors from the zsh-completion plugin, you might want to add this to the beginning of your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# workaround as per https://superuser.com/questions/1222867/zsh-completion-functions-broken&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.oh-my-zsh/plugins/git:&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.oh-my-zsh/functions:&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.oh-my-zsh/completions:/usr/share/zsh/site-functions:/usr/share/zsh/&lt;span class=&quot;nv&quot;&gt;$ZSH_VERSION&lt;/span&gt;/functions

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;FPATH
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you encounter an error from Oh-My-Zsh saying &lt;code class=&quot;highlighter-rouge&quot;&gt;[oh-my-zsh] Insecure completion-dependent directories detected&lt;/code&gt;, set &lt;code class=&quot;highlighter-rouge&quot;&gt;ZSH_DISABLE_COMPFIX=true&lt;/code&gt; right before the line &lt;code class=&quot;highlighter-rouge&quot;&gt;source $ZSH/oh-my-zsh.sh&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; file and restart your session or run &lt;code class=&quot;highlighter-rouge&quot;&gt;exec zsh&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;dockerized-playground&quot;&gt;Dockerized playground.&lt;/h2&gt;

&lt;p&gt;If you have Docker installed then you can use the below snippet to try this setup in a sandbox without installing anything or affecting your existing setup.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker run &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LANG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C.UTF-8 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C.UTF-8 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TERM&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; ubuntu bash &lt;span class=&quot;nt&quot;&gt;-uexc&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
  apt update &amp;amp;&amp;amp; apt install -y git curl zsh autojump &amp;amp;&amp;amp; cd /root
  sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; --skip-chsh --unattended
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  git clone https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k
  curl -fsSLO http://bit.ly/Spaceship10kTheme
  echo &quot;source ~/Spaceship10kTheme&quot; &amp;gt;~/.zshrc
  exec zsh'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;vscode-tip&quot;&gt;VSCode Tip&lt;/h2&gt;

&lt;p&gt;If you are using VSCode like me, you might want to do the below to get the same terminal experience in the integrated VSCode terminal as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/ae6wi9anly8clq12z9na.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Follow these steps&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Download and install a &lt;a href=&quot;https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/SourceCodePro/Medium/complete/Sauce%20Code%20Pro%20Medium%20Nerd%20Font%20Complete%20Mono.ttf&quot;&gt;patched font&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;On Linux, run &lt;code class=&quot;highlighter-rouge&quot;&gt;fc-cache -f -v&lt;/code&gt; to refresh font cache.&lt;/li&gt;
  &lt;li&gt;On VSCode, open Preferences ‚Üí Settings and click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; icon to open JSON mode and set the below
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;terminal.integrated.shell.linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/zsh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;terminal.integrated.fontFamily&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'SauceCodePro Nerd Font Mono','Source Code Pro'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;terminal.integrated.rightClickCopyPaste&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;terminal.integrated.fontSize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;terminal.integrated.cursorStyle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;underline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;terminal.integrated.cursorBlinking&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;linux&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;osx&lt;/code&gt; if you are on a Mac.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;I hope you like it. If you have any question or if you think I missed something please add a comment.&lt;/p&gt;

&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href=&quot;https://twitter.com/deepu105&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/deepu05/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate>
        <link>/configure-a-beautiful-terminal-on-unix/</link>
        <guid isPermaLink="true">/configure-a-beautiful-terminal-on-unix/</guid>
        
        <category>linux,</category>
        
        <category>terminal,</category>
        
        <category>oh-my-zsh,</category>
        
        <category>zsh</category>
        
        
      </item>
    
  </channel>
</rss>
